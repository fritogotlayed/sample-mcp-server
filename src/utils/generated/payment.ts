export interface paths {
    "/accumulations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    teamIds?: string[];
                    teamMemberIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SharedAccumulation"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @description Creates an accumulation record and associates given parties with it.  A team or team member can be on an accumulation. An accumulation tracks the totals of various properties for a given time period for all associated parties. This information is then used when calculating commissions. Ex: A group of agents may get a discount if they exceed a certain transaction count/dollar value. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @description The total gross commission income in current cap period. */
                        grossCommissionIncome: number | null;
                        /** @description The total amount paid to Side in current cap period. */
                        capProgress: number | null;
                        /** @description The total number of personal transactions (Ex: an agent buying a property for themselves) in current cap period. This typically impacts commission calculation as personal transactions will sometimes have no fees paid to teams or brokerages */
                        personalTransactionsUsed: number | null;
                        /** @description The value of home sales in current cap period. */
                        homeSaleVolume: number | null;
                        /** @description The total number of transactions. */
                        transactionCount: number | null;
                        /** @description Prevents race conditions when updating the accumulation from multiple finalizations. */
                        version?: number;
                        partyIds: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SharedAccumulation"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/accumulations/{accumulationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accumulationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SharedAccumulation"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Updates the shared accumulation properties and associated parties. Note: 'partyIds' field behaves like a PUT operation. If the 'partyIds' property is provided, the API ensures that only the specified parties are associated with this accumulation! It will remove existing parties and add given parties. */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    accumulationId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The total gross commission income in current cap period. */
                        grossCommissionIncome?: number | null;
                        /** @description The total amount paid to Side in current cap period. */
                        capProgress?: number | null;
                        /** @description The total number of personal transactions (Ex: an agent buying a property for themselves) in current cap period. This typically impacts commission calculation as personal transactions will sometimes have no fees paid to teams or brokerages */
                        personalTransactionsUsed?: number | null;
                        /** @description The value of home sales in current cap period. */
                        homeSaleVolume?: number | null;
                        /** @description The total number of transactions. */
                        transactionCount?: number | null;
                        /** @description Prevents race conditions when updating the accumulation from multiple finalizations. */
                        version?: number;
                        /** @description Warning: This is a PUT - if this property is provided, the API will enure that ONLY these parties are associated to this accumulation! */
                        partyIds?: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["SharedAccumulation"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/accumulations/{accumulationId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    accumulationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["History"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/allocations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        amount: number;
                        isPercent: boolean;
                        profile: {
                            externalId: string;
                        };
                        profileExternalId?: string;
                        isRepresentingBothParties: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            externalId: string;
                            transactionExternalId: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                externalId: string;
                                contactExternalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/brokerages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sortBy?: "createdAt" | "name";
                    sortDirection?: "ASC" | "DESC";
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    isPrimary?: boolean;
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: ({
                                id: string;
                                legacyExternalId: null | string;
                                name: string;
                                accountingSupplierId: null | string;
                                isPrimary: boolean;
                            } & {
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            })[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calculated-commissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        updateOpportunity?: {
                            opportunityId: string;
                            gciPostFees?: number | null;
                            gciEscrow: number | null;
                            grossCommission?: number | null;
                            netCommission: number | null;
                            /** @example null */
                            onBehalfOfTeamMember: null | string;
                            /** @example null */
                            modifiedByUser: null | string;
                        };
                        updateAgentCommissions?: {
                            id: string;
                            agentSplit: number;
                            agentGrossCommission: number;
                            postCapSavings: number;
                            /** @example null */
                            postCapSavingsRecipient: null | string;
                            agentNetCommission: number;
                            eligibleForCap: number;
                            parentTeamGrossCommission: number;
                            teamGrossCommission: number;
                            splitOfGCI: number | null;
                            teamGrossPct: number | null;
                            parentTeamGrossPct: number | null;
                            sideGrossPct: number | null;
                            fixedFeesApplied: boolean;
                            /** @example null */
                            onBehalfOfTeamMember: null | string;
                            expectedSideGrossPct: number | null;
                            amountOwedtoSide: number | null;
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            modifiedByUser: string;
                        }[];
                        updateDemandTransactionDetails?: {
                            inserts?: {
                                demandTransactionId: string;
                                feeType: string;
                                prePostSplit: string;
                                /** @example null */
                                teamMemberPayorId?: null | string;
                                /** @example null */
                                teamPayorId?: null | string;
                                teamPayeeId?: string;
                                teamMemberPayeeId?: string;
                                /** @example null */
                                transactionFeeType: null | string;
                                modifiedByUser: string;
                                /** @example null */
                                onBehalfOfTeamMember: null | string;
                                feeAmount: number;
                                /** @example null */
                                feeDataType: null | string;
                                feePercent: number | null;
                            }[];
                            updates?: {
                                feeId: string;
                                /** @example null */
                                transactionFeeType: null | string;
                                modifiedByUser: string;
                                /** @example null */
                                onBehalfOfTeamMember: null | string;
                                feeAmount: number;
                                /** @example null */
                                feeDataType: null | string;
                                feePercent: number | null;
                            }[];
                            deletes?: string[];
                        };
                        updateDemandTransactionStatus?: {
                            id: string;
                            /** @enum {string} */
                            status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                            modifiedByUser: string;
                        };
                        updateFinalSubmitted?: {
                            demandTransactionLegacyExternalId: string;
                            calculatorVersion: number | null;
                            teamContacts: {
                                id: string;
                                transactionCountTierAmount: number;
                                gciTierAmount: number;
                                hsvTierAmount: number;
                                progressToAnnualCap: number;
                            }[];
                            teamCapShares: {
                                id: string;
                                progressToAnnualCap: number;
                            }[];
                            teams: {
                                id: string;
                                progressToAnnualCap: number;
                            }[];
                            collectionFees: {
                                feeCollectionId: string;
                                demandTransactionDetailId: string;
                            }[];
                            teamAccruals?: {
                                id: string;
                                updatedGrossCommissionIncome: number;
                            }[];
                        };
                        updateAllocations?: {
                            id: string;
                            agentNetCommission: number | null;
                            modifiedByUser: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            createdDemandTransactionDetailIds?: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/commission-lead-sources/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    externalProfileId: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            leadSource: "AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW";
                            profileIds: string[];
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sort?: string;
                    offset?: number;
                    limit?: number;
                    facets?: string[];
                    filters?: string[];
                    /** @example null */
                    search?: null | string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            results: {
                                /** @example null */
                                id: null | string;
                                /** @example null */
                                interactionId: null | string;
                                /** @enum {string} */
                                type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                                address: {
                                    street: string;
                                    /** @example null */
                                    street2?: null | string;
                                    city: string;
                                    state: string;
                                    zip: string;
                                };
                                /** @example null */
                                closeDate: null | string;
                                /** @example null */
                                commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                                /** @example null */
                                legacyExternalId: null | string;
                                /** @enum {string} */
                                representing: "BUYER" | "SELLER";
                                /** @enum {string} */
                                transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                                team: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    legacyExternalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                };
                                allocations: {
                                    /** @example null */
                                    id: null | string;
                                    /** @example null */
                                    legacyExternalId: null | string;
                                    agent: {
                                        /** @example null */
                                        id: null | string;
                                        name: string;
                                        /** @example null */
                                        legacyExternalId: null | string;
                                        /** @enum {string} */
                                        type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    };
                                }[];
                                /** @enum {string} */
                                paymentStatus: "AWAITING_FORM" | "CLOSING_SOON" | "AWAITING_PAYMENT" | "EXPECTED_X_DAYS" | "AWAITING_CERTIFICATION" | "PAYMENT_INITIATED" | "PAID" | "COMMISSION_FORM_NOT_YET_AVAILABLE" | "UNKNOWN";
                                hasBeenSubmitted: boolean;
                                me: {
                                    /** @example null */
                                    id: null | string;
                                    /** @example null */
                                    externalId: null | string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    additionalPermissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                                };
                                /** @enum {string} */
                                commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            }[];
                            /** @example null */
                            next: null | string;
                            /** @example null */
                            previous: null | string;
                            /** @example null */
                            facets?: null | {
                                paymentStatusGroup: {
                                    ALL: number;
                                    NEEDS_ATTENTION: number;
                                    CLOSING_SOON: number;
                                    IN_PROGRESS: number;
                                    COMPLETE: number;
                                };
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commissions/{id}/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    sortBy?: "createdAt" | "type" | "subject";
                    sortDirection?: "ASC" | "DESC";
                    type?: "INSTANT_PAY" | "ESCROW_STATEMENT" | "PARTNER_STATEMENT" | "ASSOCIATE_STATEMENT" | "TEAM_LEAD_STATEMENT" | "FORM_INVITE_10_DAYS_BEFORE_COE" | "FORM_INVITE_3_DAYS_BEFORE_COE" | "FORM_INVITE_1_DAY_AFTER_COE" | "FORM_INVITE_5_DAYS_AFTER_COE";
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            results: {
                                id: string;
                                subject: string;
                                /** @enum {string} */
                                type: "INSTANT_PAY" | "ESCROW_STATEMENT" | "PARTNER_STATEMENT" | "ASSOCIATE_STATEMENT" | "TEAM_LEAD_STATEMENT" | "FORM_INVITE_10_DAYS_BEFORE_COE" | "FORM_INVITE_3_DAYS_BEFORE_COE" | "FORM_INVITE_1_DAY_AFTER_COE" | "FORM_INVITE_5_DAYS_AFTER_COE";
                                recipients: {
                                    id: string;
                                    name: string;
                                    email: string;
                                    /** @enum {string} */
                                    status: "SUCCESSFUL" | "PENDING" | "REJECTED" | "HARD_BOUNCE" | "SOFT_BOUNCE";
                                    /** @example null */
                                    failedReason: null | string;
                                    message: string;
                                    /** @example null */
                                    createdBy: null | string;
                                    /** @example null */
                                    createdAt: null | string;
                                    /** @example null */
                                    updatedBy: null | string;
                                    /** @example null */
                                    updatedAt: null | string;
                                }[];
                                wasManuallyTriggered: boolean;
                                /** @example null */
                                createdBy: null | string;
                                /** @example null */
                                createdAt: null | string;
                                /** @example null */
                                updatedBy: null | string;
                                /** @example null */
                                updatedAt: null | string;
                            }[];
                            /** @example null */
                            next: null | string;
                            /** @example null */
                            previous: null | string;
                            /** @example null */
                            facets?: null | {
                                paymentStatusGroup: {
                                    ALL: number;
                                    NEEDS_ATTENTION: number;
                                    CLOSING_SOON: number;
                                    IN_PROGRESS: number;
                                    COMPLETE: number;
                                };
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    legacyExternalIds?: string[];
                    parentCommissionIds?: string[];
                    encodedFilter?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: ({
                                id: string;
                                interactionId: null | string;
                                auditId: null | string;
                                closeDate: null | string;
                                address: {
                                    street1: null | string;
                                    street2: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | (string);
                                    county: null | string;
                                    country: null | string;
                                };
                                sellingPercentage: number | null;
                                startingGrossCommission: number;
                                /** @enum {string} */
                                status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                                versionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                                referringCommissionId: null | string;
                                teamId: string;
                                legacyExternalId: null | string;
                                /** @enum {string} */
                                representing: "BUYER" | "SELLER";
                                /** @enum {string} */
                                propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                                settlementContactId: null | string;
                                acceptanceDate: null | string;
                                allDemandsSignedDate: null | string;
                                /** @enum {string} */
                                commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                                complianceCompletionDate: null | string;
                                complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                                complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                                demandFormSubmittedOn: null | string;
                                expirationDate: null | string;
                                hasAllInvoicesPaid: boolean;
                                hasBeenSubmitted: boolean;
                                isOriginalInstallment: boolean;
                                isOriginalCoList: boolean;
                                isChildInstallment: boolean;
                                isChildCoList: boolean;
                                isChildInternalReferral: boolean;
                                instantPayParticipation: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                                isConciergeLoan: boolean;
                                isRepresentingBothSides: boolean;
                                leadSourceDetail: null | string;
                                leadSourceName: null | string;
                                listPrice: number | null;
                                listingDate: null | string;
                                listingPercentage: number | null;
                                mlsNumber: null | string;
                                mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                                origin: null | string;
                                parentCommissionId: null | string;
                                hasReceivedPayment: boolean;
                                upstreamUpdateErrorMessage: null | string;
                                /** @description This gets mapped to the Accounting system (workday) to the memo line. It's frequently an address line 1. */
                                wireId: null | string;
                                salePrice: number;
                                adjustedGrossCommission: number | null;
                                hasInstantPayEligibleTeamMember: boolean;
                                hasCoBrokerageFees: boolean;
                                escrowAmount: number | null;
                                escrowNumber: null | string;
                                commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                                expectedPaymentStatus: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                                modernTreasuryId: null | string;
                                finalizationMethod: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                                finalizedBy: null | string;
                                finalizedAt: null | string;
                                clientNames: null | string;
                                counterPartyClientNames: null | string;
                                addressNameExtension: null | string;
                                transactionReportingId: null | string;
                                offMarketListingNotes: null | string;
                                legacyDemandTransactionExternalId: null | string;
                                brokerageGrossCommission: number | null;
                                brokerageNetCommission: number | null;
                                latestStatementsSent: boolean;
                                needsAttention: null | string;
                                isPersonalTransaction: boolean;
                                statementsLastManuallySent: null | string;
                                statementsLastManuallyOverridden: null | string;
                            } & {
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            })[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example null */
                        interactionId: null | string;
                        /** @example null */
                        auditId: null | string;
                        /** @example null */
                        closeDate: null | string;
                        address: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                        sellingPercentage: number | null;
                        startingGrossCommission: number;
                        /** @enum {string} */
                        status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @enum {string} */
                        versionStatus?: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                        teamId: string;
                        /** @example null */
                        legacyExternalId: null | string;
                        /** @enum {string} */
                        representing: "BUYER" | "SELLER";
                        /** @enum {string} */
                        propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        /** @example null */
                        settlementContactId?: null | string;
                        /** @example null */
                        acceptanceDate: null | string;
                        /** @example null */
                        allDemandsSignedDate: null | string;
                        /** @enum {string} */
                        commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                        /** @example null */
                        complianceCompletionDate: null | string;
                        /** @example null */
                        complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                        /** @example null */
                        complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                        /** @example null */
                        demandFormSubmittedOn: null | string;
                        /** @example null */
                        expirationDate: null | string;
                        hasBeenSubmitted: boolean;
                        isOriginalInstallment: boolean;
                        isOriginalCoList: boolean;
                        isChildInstallment: boolean;
                        isChildCoList: boolean;
                        isChildInternalReferral: boolean;
                        /** @example null */
                        instantPayParticipation: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                        isConciergeLoan: boolean;
                        isRepresentingBothSides: boolean;
                        /** @example null */
                        leadSourceDetail: null | string;
                        /** @example null */
                        leadSourceName: null | string;
                        listPrice: number | null;
                        /** @example null */
                        listingDate: null | string;
                        listingPercentage: number | null;
                        /** @example null */
                        mlsNumber: null | string;
                        /** @example null */
                        mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                        /** @example null */
                        origin: null | string;
                        /** @example null */
                        parentCommissionId: null | string;
                        hasReceivedPayment: boolean;
                        /** @example null */
                        upstreamUpdateErrorMessage: null | string;
                        /** @example null */
                        wireId: null | string;
                        salePrice: number;
                        adjustedGrossCommission: number | null;
                        escrowAmount: number | null;
                        /** @example null */
                        escrowNumber: null | string;
                        /** @example null */
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        /** @example null */
                        expectedPaymentStatus: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                        /** @example null */
                        modernTreasuryId: null | string;
                        /** @example null */
                        finalizationMethod: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                        /** @example null */
                        finalizedBy: null | string;
                        /** @example null */
                        finalizedAt: null | string;
                        /** @example null */
                        clientNames: null | string;
                        /** @example null */
                        counterPartyClientNames: null | string;
                        /** @example null */
                        addressNameExtension: null | string;
                        /** @example null */
                        transactionReportingId: null | string;
                        /** @example null */
                        offMarketListingNotes: null | string;
                        /** @example null */
                        legacyDemandTransactionExternalId: null | string;
                        brokerageGrossCommission: number | null;
                        brokerageNetCommission: number | null;
                        /** @example null */
                        needsAttention?: null | string;
                        isPersonalTransaction?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            interactionId: null | string;
                            auditId: null | string;
                            closeDate: null | string;
                            address: {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            versionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            referringCommissionId: null | string;
                            teamId: string;
                            legacyExternalId: null | string;
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER";
                            /** @enum {string} */
                            propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            settlementContactId: null | string;
                            acceptanceDate: null | string;
                            allDemandsSignedDate: null | string;
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            complianceCompletionDate: null | string;
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                            demandFormSubmittedOn: null | string;
                            expirationDate: null | string;
                            hasAllInvoicesPaid: boolean;
                            hasBeenSubmitted: boolean;
                            isOriginalInstallment: boolean;
                            isOriginalCoList: boolean;
                            isChildInstallment: boolean;
                            isChildCoList: boolean;
                            isChildInternalReferral: boolean;
                            instantPayParticipation: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                            isConciergeLoan: boolean;
                            isRepresentingBothSides: boolean;
                            leadSourceDetail: null | string;
                            leadSourceName: null | string;
                            listPrice: number | null;
                            listingDate: null | string;
                            listingPercentage: number | null;
                            mlsNumber: null | string;
                            mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                            origin: null | string;
                            parentCommissionId: null | string;
                            hasReceivedPayment: boolean;
                            upstreamUpdateErrorMessage: null | string;
                            /** @description This gets mapped to the Accounting system (workday) to the memo line. It's frequently an address line 1. */
                            wireId: null | string;
                            salePrice: number;
                            adjustedGrossCommission: number | null;
                            hasInstantPayEligibleTeamMember: boolean;
                            hasCoBrokerageFees: boolean;
                            escrowAmount: number | null;
                            escrowNumber: null | string;
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            expectedPaymentStatus: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                            modernTreasuryId: null | string;
                            finalizationMethod: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                            finalizedBy: null | string;
                            finalizedAt: null | string;
                            clientNames: null | string;
                            counterPartyClientNames: null | string;
                            addressNameExtension: null | string;
                            transactionReportingId: null | string;
                            offMarketListingNotes: null | string;
                            legacyDemandTransactionExternalId: null | string;
                            brokerageGrossCommission: number | null;
                            brokerageNetCommission: number | null;
                            latestStatementsSent: boolean;
                            needsAttention: null | string;
                            isPersonalTransaction: boolean;
                            statementsLastManuallySent: null | string;
                            statementsLastManuallyOverridden: null | string;
                        } & {
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            interactionId: null | string;
                            auditId: null | string;
                            closeDate: null | string;
                            address: {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            versionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            referringCommissionId: null | string;
                            teamId: string;
                            legacyExternalId: null | string;
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER";
                            /** @enum {string} */
                            propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            settlementContactId: null | string;
                            acceptanceDate: null | string;
                            allDemandsSignedDate: null | string;
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            complianceCompletionDate: null | string;
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                            demandFormSubmittedOn: null | string;
                            expirationDate: null | string;
                            hasAllInvoicesPaid: boolean;
                            hasBeenSubmitted: boolean;
                            isOriginalInstallment: boolean;
                            isOriginalCoList: boolean;
                            isChildInstallment: boolean;
                            isChildCoList: boolean;
                            isChildInternalReferral: boolean;
                            instantPayParticipation: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                            isConciergeLoan: boolean;
                            isRepresentingBothSides: boolean;
                            leadSourceDetail: null | string;
                            leadSourceName: null | string;
                            listPrice: number | null;
                            listingDate: null | string;
                            listingPercentage: number | null;
                            mlsNumber: null | string;
                            mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                            origin: null | string;
                            parentCommissionId: null | string;
                            hasReceivedPayment: boolean;
                            upstreamUpdateErrorMessage: null | string;
                            /** @description This gets mapped to the Accounting system (workday) to the memo line. It's frequently an address line 1. */
                            wireId: null | string;
                            salePrice: number;
                            adjustedGrossCommission: number | null;
                            hasInstantPayEligibleTeamMember: boolean;
                            hasCoBrokerageFees: boolean;
                            escrowAmount: number | null;
                            escrowNumber: null | string;
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            expectedPaymentStatus: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                            modernTreasuryId: null | string;
                            finalizationMethod: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                            finalizedBy: null | string;
                            finalizedAt: null | string;
                            clientNames: null | string;
                            counterPartyClientNames: null | string;
                            addressNameExtension: null | string;
                            transactionReportingId: null | string;
                            offMarketListingNotes: null | string;
                            legacyDemandTransactionExternalId: null | string;
                            brokerageGrossCommission: number | null;
                            brokerageNetCommission: number | null;
                            latestStatementsSent: boolean;
                            needsAttention: null | string;
                            isPersonalTransaction: boolean;
                            statementsLastManuallySent: null | string;
                            statementsLastManuallyOverridden: null | string;
                        } & {
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        closeDate?: null | string;
                        address?: {
                            /** @example null */
                            street1?: null | string;
                            /** @example null */
                            street2?: null | string;
                            /** @example null */
                            state?: null | string;
                            /** @example null */
                            city?: null | string;
                            /** @example null */
                            zip?: null | (string);
                            /** @example null */
                            county?: null | string;
                            /** @example null */
                            country?: null | string;
                        };
                        sellingPercentage?: number | null;
                        startingGrossCommission?: number;
                        /** @enum {string} */
                        status?: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @enum {string} */
                        versionStatus?: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                        referringCommissionId?: string;
                        teamId?: string;
                        legacyExternalId?: string;
                        /** @enum {string} */
                        representing?: "BUYER" | "SELLER";
                        /** @enum {string} */
                        propertyType?: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        /** @example null */
                        settlementContactId?: null | string;
                        /** @example null */
                        acceptanceDate?: null | string;
                        /** @example null */
                        allDemandsSignedDate?: null | string;
                        /** @enum {string} */
                        commissionSystem?: "SIDE" | "BROKERMINT" | "UNKNOWN";
                        /** @example null */
                        complianceCompletionDate?: null | string;
                        /** @example null */
                        complianceStage?: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                        /** @example null */
                        complianceStatus?: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                        /** @example null */
                        demandFormSubmittedOn?: null | string;
                        /** @example null */
                        expirationDate?: null | string;
                        hasBeenSubmitted?: boolean;
                        isOriginalInstallment?: boolean;
                        isOriginalCoList?: boolean;
                        isChildInstallment?: boolean;
                        isChildCoList?: boolean;
                        isChildInternalReferral?: boolean;
                        /** @example null */
                        instantPayParticipation?: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                        isConciergeLoan?: boolean;
                        isRepresentingBothSides?: boolean;
                        /** @example null */
                        leadSourceDetail?: null | string;
                        /** @example null */
                        leadSourceName?: null | string;
                        listPrice?: number | null;
                        /** @example null */
                        listingDate?: null | string;
                        listingPercentage?: number | null;
                        /** @example null */
                        mlsNumber?: null | string;
                        /** @example null */
                        mlsStatus?: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                        /** @example null */
                        origin?: null | string;
                        /** @example null */
                        parentCommissionId?: null | string;
                        hasReceivedPayment?: boolean;
                        /** @example null */
                        upstreamUpdateErrorMessage?: null | string;
                        /** @example null */
                        wireId?: null | string;
                        salePrice?: number;
                        adjustedGrossCommission?: number | null;
                        escrowAmount?: number | null;
                        /** @example null */
                        escrowNumber?: null | string;
                        /** @example null */
                        commissionLeadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        /** @example null */
                        expectedPaymentStatus?: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                        /** @example null */
                        modernTreasuryId?: null | string;
                        /** @example null */
                        finalizationMethod?: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                        /** @example null */
                        finalizedBy?: null | string;
                        /** @example null */
                        finalizedAt?: null | string;
                        /** @example null */
                        clientNames?: null | string;
                        /** @example null */
                        counterPartyClientNames?: null | string;
                        /** @example null */
                        addressNameExtension?: null | string;
                        /** @example null */
                        transactionReportingId?: null | string;
                        /** @example null */
                        offMarketListingNotes?: null | string;
                        /** @example null */
                        legacyDemandTransactionExternalId?: null | string;
                        brokerageGrossCommission?: number | null;
                        brokerageNetCommission?: number | null;
                        /** @example null */
                        needsAttention?: null | string;
                        isPersonalTransaction?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            interactionId: null | string;
                            auditId: null | string;
                            closeDate: null | string;
                            address: {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            versionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            referringCommissionId: null | string;
                            teamId: string;
                            legacyExternalId: null | string;
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER";
                            /** @enum {string} */
                            propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            settlementContactId: null | string;
                            acceptanceDate: null | string;
                            allDemandsSignedDate: null | string;
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            complianceCompletionDate: null | string;
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                            demandFormSubmittedOn: null | string;
                            expirationDate: null | string;
                            hasAllInvoicesPaid: boolean;
                            hasBeenSubmitted: boolean;
                            isOriginalInstallment: boolean;
                            isOriginalCoList: boolean;
                            isChildInstallment: boolean;
                            isChildCoList: boolean;
                            isChildInternalReferral: boolean;
                            instantPayParticipation: null | ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID");
                            isConciergeLoan: boolean;
                            isRepresentingBothSides: boolean;
                            leadSourceDetail: null | string;
                            leadSourceName: null | string;
                            listPrice: number | null;
                            listingDate: null | string;
                            listingPercentage: number | null;
                            mlsNumber: null | string;
                            mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                            origin: null | string;
                            parentCommissionId: null | string;
                            hasReceivedPayment: boolean;
                            upstreamUpdateErrorMessage: null | string;
                            /** @description This gets mapped to the Accounting system (workday) to the memo line. It's frequently an address line 1. */
                            wireId: null | string;
                            salePrice: number;
                            adjustedGrossCommission: number | null;
                            hasInstantPayEligibleTeamMember: boolean;
                            hasCoBrokerageFees: boolean;
                            escrowAmount: number | null;
                            escrowNumber: null | string;
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            expectedPaymentStatus: null | ("ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED");
                            modernTreasuryId: null | string;
                            finalizationMethod: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
                            finalizedBy: null | string;
                            finalizedAt: null | string;
                            clientNames: null | string;
                            counterPartyClientNames: null | string;
                            addressNameExtension: null | string;
                            transactionReportingId: null | string;
                            offMarketListingNotes: null | string;
                            legacyDemandTransactionExternalId: null | string;
                            brokerageGrossCommission: number | null;
                            brokerageNetCommission: number | null;
                            latestStatementsSent: boolean;
                            needsAttention: null | string;
                            isPersonalTransaction: boolean;
                            statementsLastManuallySent: null | string;
                            statementsLastManuallyOverridden: null | string;
                        } & {
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v2/commissions/{commissionId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                historyId: string;
                                /** @example null */
                                requestId: null | string;
                                changes: {
                                    field: string;
                                    /** @example null */
                                    oldValue: null | string;
                                    /** @example null */
                                    newValue: null | string;
                                    entityId: string;
                                }[];
                                allocationChanges: {
                                    field: string;
                                    /** @example null */
                                    oldValue: null | string;
                                    /** @example null */
                                    newValue: null | string;
                                    entityId: string;
                                }[];
                                allocationSplitChanges: {
                                    field: string;
                                    /** @example null */
                                    oldValue: null | string;
                                    /** @example null */
                                    newValue: null | string;
                                    entityId: string;
                                }[];
                                commissionLineItemChanges: {
                                    field: string;
                                    /** @example null */
                                    oldValue: null | string;
                                    /** @example null */
                                    newValue: null | string;
                                    entityId: string;
                                }[];
                                assigneeChanges: {
                                    /** @enum {string} */
                                    action: "ADD" | "UPDATE" | "DELETE";
                                    assignee: string;
                                    entityId: string;
                                }[];
                                disqualifyingReasonsChanges: {
                                    /** @enum {string} */
                                    action: "ADD" | "UPDATE" | "DELETE";
                                    /** @enum {string} */
                                    reason: "ZERO_DOLLARS_TO_SIDE" | "IS_CONCIERGE_LOAN" | "HAS_PRE_SPLIT_FEES" | "HAS_OP_CITY_REFERRAL" | "HAS_CO_BROKERAGE_FEES" | "IS_PERSONAL_TRANSACTION" | "HAS_TERMINATED_AGENTS" | "HAS_BUYER_SIDE_ADDITIONAL_COMMISSION" | "INTERNAL_REFERRAL" | "AUTO_SEND_DISABLED" | "NO_RECIPIENTS_PARTNER_STATEMENT" | "NO_RECIPIENTS_ASSOCIATE_STATEMENT" | "NO_RECIPIENTS_TEAM_LEAD_STATEMENT" | "HAS_ADDITIONAL_COMMISSION" | "INSUFFICIENT_SIDE_SHARE_FOR_FLAT_FEE_TEAM";
                                    entityId: string;
                                }[];
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}/send-statement-disqualifying-reasons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": ("ZERO_DOLLARS_TO_SIDE" | "IS_CONCIERGE_LOAN" | "HAS_PRE_SPLIT_FEES" | "HAS_OP_CITY_REFERRAL" | "HAS_CO_BROKERAGE_FEES" | "IS_PERSONAL_TRANSACTION" | "HAS_TERMINATED_AGENTS" | "HAS_BUYER_SIDE_ADDITIONAL_COMMISSION" | "INTERNAL_REFERRAL" | "AUTO_SEND_DISABLED" | "NO_RECIPIENTS_PARTNER_STATEMENT" | "NO_RECIPIENTS_ASSOCIATE_STATEMENT" | "NO_RECIPIENTS_TEAM_LEAD_STATEMENT" | "HAS_ADDITIONAL_COMMISSION" | "INSUFFICIENT_SIDE_SHARE_FOR_FLAT_FEE_TEAM")[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}/bounced-recipients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            email: string;
                            /** @enum {string} */
                            status: "SUCCESSFUL" | "PENDING" | "REJECTED" | "HARD_BOUNCE" | "SOFT_BOUNCE";
                            /** @example null */
                            failedReason: null | string;
                            message: string;
                            /** @example null */
                            createdBy: null | string;
                            /** @example null */
                            createdAt: null | string;
                            /** @example null */
                            updatedBy: null | string;
                            /** @example null */
                            updatedAt: null | string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}/assignees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": string[];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}/allocations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            partyId: string;
                            needsCalculation: boolean;
                            amount: number | null;
                            percentage: number | null;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipientPartyId: null | string;
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            splits: {
                                id: string;
                                allocationId: string;
                                partyId: string;
                                amount: number | null;
                                percentage: number | null;
                                expectedAmount: number | null;
                                expectedPercentage: number | null;
                                taxAmount: number | null;
                                netAmount: number | null;
                            }[];
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        partyId: string;
                        /** @example null */
                        legacyExternalId: null | string;
                        needsCalculation: boolean;
                        amount: number | null;
                        percentage: number | null;
                        isPersonalTransaction: boolean;
                        isRepresentingBothParties: boolean;
                        postCapSavingsAmount: number | null;
                        /** @example null */
                        postCapSavingsRecipientPartyId: null | string;
                        /** @example null */
                        rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                        splits: {
                            partyId: string;
                            amount: number | null;
                            percentage: number | null;
                            expectedAmount: number | null;
                            expectedPercentage: number | null;
                            taxAmount: number | null;
                            netAmount: number | null;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            partyId: string;
                            needsCalculation: boolean;
                            amount: number | null;
                            percentage: number | null;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipientPartyId: null | string;
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            splits: {
                                id: string;
                                allocationId: string;
                                partyId: string;
                                amount: number | null;
                                percentage: number | null;
                                expectedAmount: number | null;
                                expectedPercentage: number | null;
                                taxAmount: number | null;
                                netAmount: number | null;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/commissions/{commissionId}/allocations/{allocationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                    allocationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            partyId: string;
                            needsCalculation: boolean;
                            amount: number | null;
                            percentage: number | null;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipientPartyId: null | string;
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            splits: {
                                id: string;
                                allocationId: string;
                                partyId: string;
                                amount: number | null;
                                percentage: number | null;
                                expectedAmount: number | null;
                                expectedPercentage: number | null;
                                taxAmount: number | null;
                                netAmount: number | null;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                    allocationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                    allocationId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        partyId?: string;
                        needsCalculation?: boolean;
                        amount?: number | null;
                        percentage?: number | null;
                        isPersonalTransaction?: boolean;
                        isRepresentingBothParties?: boolean;
                        postCapSavingsAmount?: number | null;
                        /** @example null */
                        postCapSavingsRecipientPartyId?: null | string;
                        /** @example null */
                        rebateType?: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            partyId: string;
                            needsCalculation: boolean;
                            amount: number | null;
                            percentage: number | null;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipientPartyId: null | string;
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            splits: {
                                id: string;
                                allocationId: string;
                                partyId: string;
                                amount: number | null;
                                percentage: number | null;
                                expectedAmount: number | null;
                                expectedPercentage: number | null;
                                taxAmount: number | null;
                                netAmount: number | null;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v2/commissions/{commissionId}/allocations/{allocationId}/splits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionId: string;
                    allocationId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        updates: {
                            id: string;
                            partyId?: string;
                            amount?: number | null;
                            percentage?: number | null;
                            expectedAmount?: number | null;
                            expectedPercentage?: number | null;
                            taxAmount?: number | null;
                            netAmount?: number | null;
                        }[];
                        creates: {
                            partyId: string;
                            amount: number | null;
                            percentage: number | null;
                            expectedAmount: number | null;
                            expectedPercentage: number | null;
                            taxAmount: number | null;
                            netAmount: number | null;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            allocationId: string;
                            partyId: string;
                            amount: number | null;
                            percentage: number | null;
                            expectedAmount: number | null;
                            expectedPercentage: number | null;
                            taxAmount: number | null;
                            netAmount: number | null;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commission-tiers/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    tierTypes?: ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20")[];
                    /** @description Filter to **only** include no cap tier configurations */
                    noCapTierConfigs: boolean;
                    ids?: string[];
                    legacyExternalIds?: string[];
                    strategyIds?: string[];
                    partyIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommissionTier"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commission-tiers/{commissionTierId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionTierId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["CommissionTier"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commission-line-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    legacyExternalIds?: string[];
                    commissionId?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                commissionLineItemId: string;
                                commissionId: string;
                                /** @example null */
                                legacyExternalId: null | string;
                                /** @example null */
                                description: null | string;
                                /** @example null */
                                referralCommissionId: null | string;
                                /** @example null */
                                collectionId: null | string;
                                /** @example null */
                                referralType: null | ("INTERNAL" | "EXTERNAL");
                                /** @example null */
                                paidToId: null | string;
                                /** @example null */
                                paidById: null | string;
                                /** @example null */
                                wireId: null | string;
                                /** @example null */
                                coBrokerageAgentName: null | string;
                                /** @example null */
                                coBrokerageBrokerageName: null | string;
                                isPreAllocation: boolean;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                                amount: number | null;
                                percentage: number | null;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        legacyExternalId: string;
                        isPreAllocation: boolean;
                        /** @enum {string} */
                        type: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                        amount: number | null;
                        percentage: number | null;
                        /** @example null */
                        paidToId: null | string;
                        /** @example null */
                        paidById: null | string;
                        /** @example null */
                        description: null | string;
                        /** @example null */
                        referralCommissionId?: null | string;
                        /** @example null */
                        collectionId: null | string;
                        /** @example null */
                        wireId: null | string;
                        /** @example null */
                        coBrokerageAgentName?: null | string;
                        /** @example null */
                        coBrokerageBrokerageName?: null | string;
                        commissionId: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            commissionLineItemId: string;
                            commissionId: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            description: null | string;
                            /** @example null */
                            referralCommissionId: null | string;
                            /** @example null */
                            collectionId: null | string;
                            /** @example null */
                            referralType: null | ("INTERNAL" | "EXTERNAL");
                            /** @example null */
                            paidToId: null | string;
                            /** @example null */
                            paidById: null | string;
                            /** @example null */
                            wireId: null | string;
                            /** @example null */
                            coBrokerageAgentName: null | string;
                            /** @example null */
                            coBrokerageBrokerageName: null | string;
                            isPreAllocation: boolean;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                            amount: number | null;
                            percentage: number | null;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/commission-line-items/{commissionLineItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    includeDeleted?: boolean;
                };
                header?: never;
                path: {
                    commissionLineItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            commissionLineItemId: string;
                            commissionId: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            description: null | string;
                            /** @example null */
                            referralCommissionId: null | string;
                            /** @example null */
                            collectionId: null | string;
                            /** @example null */
                            referralType: null | ("INTERNAL" | "EXTERNAL");
                            /** @example null */
                            paidToId: null | string;
                            /** @example null */
                            paidById: null | string;
                            /** @example null */
                            wireId: null | string;
                            /** @example null */
                            coBrokerageAgentName: null | string;
                            /** @example null */
                            coBrokerageBrokerageName: null | string;
                            isPreAllocation: boolean;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                            amount: number | null;
                            percentage: number | null;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionLineItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    commissionLineItemId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        isPreAllocation?: boolean;
                        /** @enum {string} */
                        type?: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                        amount?: number | null;
                        percentage?: number | null;
                        /** @example null */
                        paidToId?: null | string;
                        /** @example null */
                        paidById?: null | string;
                        /** @example null */
                        description?: null | string;
                        /** @example null */
                        referralCommissionId?: null | string;
                        /** @example null */
                        collectionId?: null | string;
                        /** @example null */
                        wireId?: null | string;
                        /** @example null */
                        coBrokerageAgentName?: null | string;
                        /** @example null */
                        coBrokerageBrokerageName?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            commissionLineItemId: string;
                            commissionId: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            description: null | string;
                            /** @example null */
                            referralCommissionId: null | string;
                            /** @example null */
                            collectionId: null | string;
                            /** @example null */
                            referralType: null | ("INTERNAL" | "EXTERNAL");
                            /** @example null */
                            paidToId: null | string;
                            /** @example null */
                            paidById: null | string;
                            /** @example null */
                            wireId: null | string;
                            /** @example null */
                            coBrokerageAgentName: null | string;
                            /** @example null */
                            coBrokerageBrokerageName: null | string;
                            isPreAllocation: boolean;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                            amount: number | null;
                            percentage: number | null;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/commission-form-invite/dispatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/demand-transactions/{demandTransactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                    demandTransactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @enum {string} */
                            status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                            hasBeenSubmitted: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/demand-transactions/{demandTransactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                    demandTransactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @enum {string} */
                            status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                            hasBeenSubmitted: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delegate-groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sortBy?: "createdAt" | "permissionType";
                    sortDirection?: "ASC" | "DESC";
                    offset?: number;
                    limit?: number;
                    filters?: string[];
                    ids?: string[];
                    onBehalfOf?: string;
                    delegatedTo?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                onBehalfOfId: string;
                                delegatedRelations: {
                                    id: string;
                                    delegatedToId: string;
                                    /** @example null */
                                    createdBy: null | string;
                                    /** Format: date-time */
                                    createdAt: string;
                                    /** @example null */
                                    updatedBy: null | string;
                                    /** Format: date-time */
                                    updatedAt: string;
                                }[];
                                permissions: {
                                    id: string;
                                    /** @enum {string} */
                                    permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                    /** @example null */
                                    createdBy: null | string;
                                    /** Format: date-time */
                                    createdAt: string;
                                    /** @example null */
                                    updatedBy: null | string;
                                    /** Format: date-time */
                                    updatedAt: string;
                                }[];
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        onBehalfOfId: string;
                        delegatedToId: string[];
                        permissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            onBehalfOfId: string;
                            delegatedRelations: {
                                id: string;
                                delegatedToId: string;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            permissions: {
                                id: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            onBehalfOfId: string;
                            delegatedRelations: {
                                id: string;
                                delegatedToId: string;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            permissions: {
                                id: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delegate-groups/{delegateGroupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    delegateGroupId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        delegatedToId: string[];
                        permissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            onBehalfOfId: string;
                            delegatedRelations: {
                                id: string;
                                delegatedToId: string;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            permissions: {
                                id: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            onBehalfOfId: string;
                            delegatedRelations: {
                                id: string;
                                delegatedToId: string;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            permissions: {
                                id: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    delegateGroupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            onBehalfOfId: string;
                            delegatedRelations: {
                                id: string;
                                delegatedToId: string;
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                            permissions: {
                                id: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/delegate-groups/{delegateGroupId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    delegateGroupId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                /** @example null */
                                requestId: null | string;
                                permissions: {
                                    ADD: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                                    DELETE: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                                };
                                relations: {
                                    ADD: string[];
                                    DELETE: string[];
                                };
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external/createProspectTeam": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        legacyExternalId: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external/teams/{teamId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    search?: string;
                    includeHasPricingPlan?: boolean;
                };
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            name: string;
                            /** @enum {string} */
                            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                            teamId: string;
                            legacyExternalId: string;
                            /** @example null */
                            role: null | ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR");
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external/createProspectTeamMember": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        legacyExternalId: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/instant-pay/dispatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outside-brokerages/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sortBy?: "name" | "createdAt";
                    sortDirection?: "ASC" | "DESC";
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    legacyExternalIds?: string[];
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                name: string;
                                /** @example null */
                                legacyExternalId: null | string;
                                /** @example null */
                                accountingSupplierId: null | string;
                                /** @example null */
                                phone: null | string;
                                /** @example null */
                                email: null | string;
                                /** @example null */
                                address: null | {
                                    street1?: null | string;
                                    street2?: null | string;
                                    state?: null | string;
                                    city?: null | string;
                                    zip?: null | (string);
                                    county?: null | string;
                                    country?: null | string;
                                };
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        accountingSupplierId: string;
                        phone?: string;
                        email?: string;
                        address?: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            accountingSupplierId: null | string;
                            /** @example null */
                            phone: null | string;
                            /** @example null */
                            email: null | string;
                            /** @example null */
                            address: null | {
                                street1?: null | string;
                                street2?: null | string;
                                state?: null | string;
                                city?: null | string;
                                zip?: null | (string);
                                county?: null | string;
                                country?: null | string;
                            };
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/outside-brokerages/{outsideBrokerageId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    outsideBrokerageId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            accountingSupplierId: null | string;
                            /** @example null */
                            phone: null | string;
                            /** @example null */
                            email: null | string;
                            /** @example null */
                            address: null | {
                                street1?: null | string;
                                street2?: null | string;
                                state?: null | string;
                                city?: null | string;
                                zip?: null | (string);
                                county?: null | string;
                                country?: null | string;
                            };
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    outsideBrokerageId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        accountingSupplierId?: string;
                        phone?: string;
                        email?: string;
                        address?: {
                            /** @example null */
                            street1?: null | string;
                            /** @example null */
                            street2?: null | string;
                            /** @example null */
                            state?: null | string;
                            /** @example null */
                            city?: null | string;
                            /** @example null */
                            zip?: null | (string);
                            /** @example null */
                            county?: null | string;
                            /** @example null */
                            country?: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            /** @example null */
                            accountingSupplierId: null | string;
                            /** @example null */
                            phone: null | string;
                            /** @example null */
                            email: null | string;
                            /** @example null */
                            address: null | {
                                street1?: null | string;
                                street2?: null | string;
                                state?: null | string;
                                city?: null | string;
                                zip?: null | (string);
                                county?: null | string;
                                country?: null | string;
                            };
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/parties/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    legacyExternalIds?: string[];
                    limit?: number;
                    offset?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["Party"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/party-permissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    partyIds: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            partyId: string;
                            /** @enum {string} */
                            permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/pricing-strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    profileId: string;
                    representing: "BUYER" | "SELLER";
                    propertyType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                    isPersonalTransaction: boolean;
                    leadSource?: "AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW";
                };
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            externalId: string;
                            name: string;
                            /** @example null */
                            type: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
                            isForPersonalTransaction: boolean;
                            /** @example null */
                            leadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @example null */
                            propertyType: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
                            /** @example null */
                            representing: null | ("BUYER" | "SELLER");
                            splits: {
                                externalId: string;
                                name: string;
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                                expectedBrokeragePercent: number | null;
                            };
                            fixedFees: {
                                externalId: string;
                                name: string;
                                /** @example null */
                                paidBy: null | ("AGENT" | "PARTNER" | "TEAM" | "PARENT_TEAM" | "TEAM_SHARE" | "NA_PRE_SPLIT");
                                /** @example null */
                                paidTo: null | ("ESCROW" | "PARTNER" | "TEAM" | "PARENT_TEAM" | "SIDE" | "TC" | "RERM" | "AGENT");
                                value: number | null;
                                /** @example null */
                                dataType: null | (0 | 1);
                                /** @example null */
                                prePostSplit: null | (0 | 1);
                                /** @example null */
                                feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                            }[];
                        }[];
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"] | string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-strategies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    teamMemberExternalId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            teamMemberExternalId: string;
                            planLegacyExternalId: string;
                            deferCapPayment: boolean;
                            /** @example null */
                            deferredCapType: null | ("PERIOD_DAYS" | "TRANSACTIONS" | "AMOUNT");
                            deferredCapTypeValue: number;
                            personalTransactionLimit: number;
                            /** @example null */
                            postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{teamId}/profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    search: string;
                    role?: ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR")[];
                    includeSideTCs?: boolean;
                    includeParentTeam?: boolean;
                    includeParentTeamRecursively?: boolean;
                    transactionId?: string;
                    requireLicense?: boolean;
                };
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            name: string;
                            teamExternalId: string;
                            /** @enum {string} */
                            role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                            /** @enum {string} */
                            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                            /** @example null */
                            licenseTerminationDate: null | string;
                            hasMetPersonalTransactionLimit?: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{teamId}/profiles/{profileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                    profileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            name: string;
                            teamExternalId: string;
                            /** @enum {string} */
                            role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                            /** @enum {string} */
                            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                            /** @example null */
                            licenseTerminationDate: null | string;
                            hasMetPersonalTransactionLimit?: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/real-estate-services/{serviceType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    serviceType: "RERM" | "ADMIN_CONSULTING";
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            legacyExternalId: null | string;
                            name: string;
                            accountingSupplierId: null | string;
                            address: {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            /** @enum {string} */
                            serviceType: "RERM" | "ADMIN_CONSULTING";
                        } & {
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement-companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sortBy?: "name" | "createdAt" | "status";
                    sortDirection?: "ASC" | "DESC";
                    offset?: number;
                    limit?: number;
                    filters?: string[];
                    ids?: string[];
                    legacyExternalIds?: string[];
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                /** @example null */
                                legacyExternalId: null | string;
                                name: string;
                                /** @enum {string} */
                                status?: "APPROVED" | "PENDING" | "REJECTED";
                                /** @example null */
                                accountingCustomerId?: null | string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            name: string;
                            /** @enum {string} */
                            status?: "APPROVED" | "PENDING" | "REJECTED";
                            /** @example null */
                            accountingCustomerId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settlement-companies/{settlementCompanyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    settlementCompanyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            name: string;
                            /** @enum {string} */
                            status?: "APPROVED" | "PENDING" | "REJECTED";
                            /** @example null */
                            accountingCustomerId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    settlementCompanyId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        /** @enum {string} */
                        status?: "APPROVED" | "PENDING" | "REJECTED";
                        /** @example null */
                        accountingCustomerId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            name: string;
                            /** @enum {string} */
                            status?: "APPROVED" | "PENDING" | "REJECTED";
                            /** @example null */
                            accountingCustomerId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/settlement-contacts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @deprecated */
        get: {
            parameters: {
                query: {
                    search: string;
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            firstName: string;
                            lastName: string;
                            email: string;
                            /** @example null */
                            phoneNumber: null | string;
                            company: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                            };
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @deprecated */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        firstName: string;
                        lastName: string;
                        email: string;
                        /** @example null */
                        phoneNumber: null | string;
                        companyName: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            firstName: string;
                            lastName: string;
                            email: string;
                            /** @example null */
                            phoneNumber: null | string;
                            company: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/settlement-contacts/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    sortBy?: "name" | "createdAt" | "minCloseDate";
                    sortDirection?: "ASC" | "DESC";
                    filters?: string[];
                    /** @example null */
                    search?: null | string;
                    ids?: string[];
                    legacyExternalIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            results: {
                                id: string;
                                /** @example null */
                                legacyExternalId: null | string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                /** @example null */
                                phoneNumber: null | string;
                                companyId: string;
                            }[];
                            /** @example null */
                            next: null | string;
                            /** @example null */
                            previous: null | string;
                            /** @example null */
                            facets?: null | {
                                paymentStatusGroup: {
                                    ALL: number;
                                    NEEDS_ATTENTION: number;
                                    CLOSING_SOON: number;
                                    IN_PROGRESS: number;
                                    COMPLETE: number;
                                };
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/settlement-contacts/{settlementContactId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    settlementContactId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            firstName: string;
                            lastName: string;
                            email: string;
                            /** @example null */
                            phoneNumber: null | string;
                            companyId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    settlementContactId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        firstName?: string;
                        lastName?: string;
                        /** Format: email */
                        email?: string;
                        /** @example null */
                        phoneNumber?: null | string;
                        company?: {
                            id: string;
                            status?: unknown;
                            name?: unknown;
                        } | {
                            name: string;
                            /** @enum {string} */
                            status: "APPROVED" | "PENDING" | "REJECTED";
                            id?: unknown;
                        } | {
                            id?: unknown;
                            name?: unknown;
                            /** @enum {string} */
                            status: "APPROVED" | "PENDING" | "REJECTED";
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            firstName: string;
                            lastName: string;
                            email: string;
                            /** @example null */
                            phoneNumber: null | string;
                            companyId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v2/settlement-contacts/commissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    legacyExternalIds: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: ({
                                id: string;
                                interactionId: null | string;
                                auditId: null | string;
                                teamId: string;
                                legacyExternalId: null | string;
                                address: {
                                    street1: null | string;
                                    street2: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | (string);
                                    county: null | string;
                                    country: null | string;
                                };
                                closeDate: null | string;
                                representing: null | ("BUYER" | "SELLER");
                                sellingPercentage: number | null;
                                startingGrossCommission: number;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                referringCommissionId: null | string;
                                settlementContactId: null | string;
                                settlementContactLegacyExternalId: null | string;
                            } & {
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            })[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/shared-caps/{sharedCapId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    sharedCapId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["History"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/platform-fee/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": string[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/platform-fee/subscriptions/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            success: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plans/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    commissionTierPartyIds?: string[];
                    teamIds?: string[];
                    legacyTeamExternalIds?: string[];
                    identityTeamIds?: string[];
                    encodedFilter?: string;
                    teamMemberIds?: string[];
                    identityUserIds?: string[];
                    legacyTeamMemberExternalIds?: string[];
                    legacyContactExternalIds?: string[];
                    /** @description flag to include template plans in query */
                    isTemplate?: boolean;
                    /** @description flag to include draft plans in query */
                    isDraft?: boolean;
                    /** @description flag to include archived plans in query */
                    isArchived?: boolean;
                    /** @description flag to include active plans in query */
                    isActive?: boolean;
                    /** @description used to filter team or team member(agent) plans */
                    pricingPlanPartyType?: "TEAM_MEMBER" | "TEAM";
                    ids?: string[];
                    legacyExternalIds?: string[];
                    originatingPlanIds?: string[];
                    sharedCapIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The legacy id of the pricing plan (Not the Id for resolving pricing plan parties)
                         * @example null
                         */
                        legacyExternalId?: null | string;
                        pricingPlanPartyType: ("TEAM_MEMBER" | "TEAM") & ("TEAM_MEMBER" | "TEAM");
                        pricingPlanAccumulationType: ("INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP") & ("INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP");
                        /** @example null */
                        noCapTierType?: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                        /** @example null */
                        discountType?: null | ("DEFER_COMMISSION_START_DATE" | "FOUR_PERSONAL_TRANSACTIONS_PER_YEAR" | "NINE_PERCENT_FIRST_TIER");
                        /** @example null */
                        discountValue?: null | number;
                        /** @example null */
                        postCapSavingsRecipientType?: null | ("AGENT" | "TEAM" | "PARENT_TEAM");
                        /** @example null */
                        nextCommissionResetDate?: null | string;
                        /** @example null */
                        commissionEffectiveDate?: null | string;
                        /** @example null */
                        nextCapResetDate?: null | string;
                        /** @example null */
                        capEffectiveDate?: null | string;
                        /** @example null */
                        pricingPlanResetPeriodType?: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1" | "NO_RESET_DATE");
                        /** @example null */
                        pricingPlanCapResetPeriodType?: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1");
                        chargeForLeases?: boolean;
                        isDraft?: boolean;
                        /** @description Derived in the service layer to easily indicate active plan on client side */
                        isActive?: boolean;
                        isTemplate?: boolean;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        templateName?: null | string;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        originatingPlanId?: null | string;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        roleRestriction?: null | ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR");
                        linkedParties: string[] & string[];
                        /**
                         * @description Shared caps linked with this plan (If any)
                         * @example null
                         */
                        sharedCap?: null | components["schemas"]["SharedCap"];
                        /** @example null */
                        capAmount?: null | number;
                        /** @example null */
                        personalTransactionCount?: null | number;
                        platformFee?: {
                            amount?: number;
                            /** @enum {string} */
                            billingType?: "PARTNER_PAY" | "ASSOCIATE_INDIVIDUAL_PAY";
                            notes?: string;
                            /** Format: date */
                            setupDate?: string;
                            /** Format: date */
                            startDate?: string;
                            /** Format: date */
                            overrideStartDate?: string;
                            /** @description Partner Paid By party */
                            partnerParty?: string;
                            /** @enum {string} */
                            deferTime?: "ONE_MONTH" | "TWO_MONTHS";
                        };
                        strategies: {
                            /** @example null */
                            legacyExternalId?: null | string;
                            isForPersonalTransaction?: boolean;
                            /** @example null */
                            type?: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
                            /** @example null */
                            leadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @example null */
                            transactionType?: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
                            /** @example null */
                            representing?: null | ("BUYER" | "SELLER" | "BOTH");
                            /** @example null */
                            tierCriteria?: null | ("GROSS_COMMISSION" | "HOME_SALES_PRICE" | "TRANSACTION_COUNT");
                            tiers?: {
                                tierLevel?: number;
                                minAmount: number;
                                /** @example null */
                                noCapTierType?: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                                splits: {
                                    percentage: number;
                                    /** @example null */
                                    legacyExternalId?: null | string;
                                    /** @enum {string} */
                                    paidToType: "AGENT" | "BRAND" | "TEAM" | "BROKERAGE";
                                }[];
                            }[];
                            fees?: ({
                                legacyExternalId?: null | string;
                                isPreAllocation: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType: (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW")) & (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW"));
                                feeType: ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE") & ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE");
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee: boolean;
                                paidByIds?: null | string[];
                                /** @enum {boolean} */
                                $isNew: true;
                                /** @enum {boolean} */
                                $isDelete: false;
                            } | {
                                legacyExternalId?: null | string;
                                isPreAllocation?: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                /** @enum {string} */
                                feeType?: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee?: boolean;
                                paidByIds?: null | string[];
                                id: string;
                                /** @enum {boolean} */
                                $isNew: false;
                                $isDelete: boolean;
                            })[];
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plans/{pricingPlanId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    commissionTierPartyIds?: string[];
                };
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example null */
                        legacyExternalId: null | string;
                        /** @enum {string} */
                        pricingPlanAccumulationType: "INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP";
                        /** @example null */
                        noCapTierType: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                        /** @example null */
                        discountType: null | ("DEFER_COMMISSION_START_DATE" | "FOUR_PERSONAL_TRANSACTIONS_PER_YEAR" | "NINE_PERCENT_FIRST_TIER");
                        /** @example null */
                        discountValue: null | number;
                        /** @example null */
                        postCapSavingsRecipientType: null | ("AGENT" | "TEAM" | "PARENT_TEAM");
                        /** @example null */
                        nextCommissionResetDate: null | string;
                        /** @example null */
                        commissionEffectiveDate: null | string;
                        /** @example null */
                        nextCapResetDate: null | string;
                        /** @example null */
                        capEffectiveDate: null | string;
                        /** @example null */
                        pricingPlanResetPeriodType: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1" | "NO_RESET_DATE");
                        /** @example null */
                        pricingPlanCapResetPeriodType: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1");
                        chargeForLeases: boolean;
                        isDraft: boolean;
                        isTemplate: boolean;
                        /** @example null */
                        templateName: null | string;
                        /** @example null */
                        originatingPlanId: null | string;
                        /** @example null */
                        roleRestriction: null | ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR");
                        linkedParties?: string[];
                        strategies: {
                            id?: string;
                            /** @example null */
                            legacyExternalId: null | string;
                            isForPersonalTransaction: boolean;
                            /** @example null */
                            leadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @example null */
                            transactionType: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER" | "BOTH";
                            /** @example null */
                            tierCriteria: null | ("GROSS_COMMISSION" | "HOME_SALES_PRICE" | "TRANSACTION_COUNT");
                            /** @example null */
                            type: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
                            tiers: components["schemas"]["CommissionTierPutBodySchema"][];
                            fees: components["schemas"]["PricingFeeV2PutBodySchema"][];
                        }[];
                        /** @example null */
                        sharedCap: null | components["schemas"]["SharedCap"];
                        /** @example null */
                        capAmount: null | number;
                        /** @example null */
                        personalTransactionCount: null | number;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The legacy id of the pricing plan (Not the Id for resolving pricing plan parties)
                         * @example null
                         */
                        legacyExternalId?: null | string;
                        pricingPlanPartyType?: ("TEAM_MEMBER" | "TEAM") & ("TEAM_MEMBER" | "TEAM");
                        pricingPlanAccumulationType?: ("INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP") & ("INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP");
                        /** @example null */
                        noCapTierType?: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                        /** @example null */
                        discountType?: null | ("DEFER_COMMISSION_START_DATE" | "FOUR_PERSONAL_TRANSACTIONS_PER_YEAR" | "NINE_PERCENT_FIRST_TIER");
                        /** @example null */
                        discountValue?: null | number;
                        /** @example null */
                        postCapSavingsRecipientType?: null | ("AGENT" | "TEAM" | "PARENT_TEAM");
                        /** @example null */
                        nextCommissionResetDate?: null | string;
                        /** @example null */
                        commissionEffectiveDate?: null | string;
                        /** @example null */
                        nextCapResetDate?: null | string;
                        /** @example null */
                        capEffectiveDate?: null | string;
                        /** @example null */
                        pricingPlanResetPeriodType?: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1" | "NO_RESET_DATE");
                        /** @example null */
                        pricingPlanCapResetPeriodType?: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1");
                        chargeForLeases?: boolean;
                        isDraft?: boolean;
                        /** @description Derived in the service layer to easily indicate active plan on client side */
                        isActive?: boolean;
                        isTemplate?: boolean;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        templateName?: null | string;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        originatingPlanId?: null | string;
                        /**
                         * @description Only used for template plans
                         * @example null
                         */
                        roleRestriction?: null | ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR");
                        linkedParties?: string[] & string[];
                        /** @example null */
                        capAmount?: null | number;
                        /** @example null */
                        personalTransactionCount?: null | number;
                        sharedCap?: components["schemas"]["SharedCapPatchBodyRef"];
                        strategies?: ({
                            legacyExternalId?: null | string;
                            isForPersonalTransaction?: boolean;
                            type?: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
                            leadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            transactionType?: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
                            representing?: null | ("BUYER" | "SELLER" | "BOTH");
                            tierCriteria?: null | ("GROSS_COMMISSION" | "HOME_SALES_PRICE" | "TRANSACTION_COUNT");
                            tiers?: {
                                tierLevel?: number;
                                minAmount: number;
                                noCapTierType?: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                                splits: {
                                    percentage: number;
                                    legacyExternalId?: null | string;
                                    /** @enum {string} */
                                    paidToType: "AGENT" | "BRAND" | "TEAM" | "BROKERAGE";
                                }[];
                            }[];
                            fees?: ({
                                legacyExternalId?: null | string;
                                isPreAllocation: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType: (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW")) & (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW"));
                                feeType: ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE") & ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE");
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee: boolean;
                                paidByIds?: null | string[];
                                /** @enum {boolean} */
                                $isNew: true;
                                /** @enum {boolean} */
                                $isDelete: false;
                            } | {
                                legacyExternalId?: null | string;
                                isPreAllocation?: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                /** @enum {string} */
                                feeType?: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee?: boolean;
                                paidByIds?: null | string[];
                                id: string;
                                /** @enum {boolean} */
                                $isNew: false;
                                $isDelete: boolean;
                            })[];
                            /** @enum {boolean} */
                            $isNew: true;
                            /** @enum {boolean} */
                            $isDelete: false;
                        } | {
                            legacyExternalId?: null | string;
                            isForPersonalTransaction?: boolean;
                            type?: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
                            leadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            transactionType?: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
                            representing?: null | ("BUYER" | "SELLER" | "BOTH");
                            tierCriteria?: null | ("GROSS_COMMISSION" | "HOME_SALES_PRICE" | "TRANSACTION_COUNT");
                            id: string;
                            tiers: {
                                tierLevel?: number;
                                minAmount: number;
                                noCapTierType?: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
                                splits: {
                                    percentage: number;
                                    legacyExternalId?: null | string;
                                    /** @enum {string} */
                                    paidToType: "AGENT" | "BRAND" | "TEAM" | "BROKERAGE";
                                }[];
                            }[];
                            fees?: ({
                                legacyExternalId?: null | string;
                                isPreAllocation: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType: (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW")) & (null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW"));
                                feeType: ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE") & ("ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE");
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee: boolean;
                                paidByIds?: null | string[];
                                /** @enum {boolean} */
                                $isNew: true;
                                /** @enum {boolean} */
                                $isDelete: false;
                            } | {
                                legacyExternalId?: null | string;
                                isPreAllocation?: boolean;
                                paidToType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                paidByType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
                                /** @enum {string} */
                                feeType?: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
                                amount?: number | null;
                                percentage?: number | null;
                                isUniversalFee?: boolean;
                                paidByIds?: null | string[];
                                id: string;
                                /** @enum {boolean} */
                                $isNew: false;
                                $isDelete: boolean;
                            })[];
                            /** @enum {boolean} */
                            $isNew: false;
                            $isDelete: boolean;
                        })[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/pricing-plans/{pricingPlanId}/team-member-merge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        teamMemberIds: string[];
                        /** @default true */
                        mergePricingPlans?: boolean;
                        /** @default true */
                        mergeAccumulations?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plans/{pricingPlanId}/activateDraftPricingPlan": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    pricingPlanId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing-plans/assignTemplateToTeamMember": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** Format: uuid */
                        teamMemberId: string;
                        /** Format: uuid */
                        pricingPlanTemplateId: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PricingPlan"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team-members/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    sortBy?: "firstName" | "lastName" | "email" | "status";
                    sortDirection?: "ASC" | "DESC";
                    ids?: string[];
                    identityUserIds?: string[];
                    legacyExternalIds?: string[];
                    sharedAccumulationIds?: string[];
                    legacyContactExternalIds?: string[];
                    includeStatusTypes?: ("ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED")[];
                    search?: string;
                    brandIds?: string[];
                    teamIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["TeamMember"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        legacyExternalId: string;
                        /** @example null */
                        identityUserId: null | string;
                        teamId: string;
                        isInstantPayEligible?: boolean;
                        /** @example null */
                        licenseTerminationDate: null | string;
                        firstName: string;
                        lastName: string;
                        email: string;
                        userLegacyExternalId: string;
                        /** @enum {string} */
                        role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                        /** @enum {string} */
                        status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                        hasAssociatedLicense: boolean;
                        /** @example null */
                        accountingSupplierId: null | string;
                        /** @example null */
                        licenseTransferDate?: null | string;
                        /** @example null */
                        numberOfPendingTransactions?: null | number;
                        /** @example null */
                        sharedAccumulationId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team-members/{teamMemberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        isInstantPayEligible?: boolean;
                        /** @example null */
                        licenseTerminationDate?: null | string;
                        /** @example null */
                        identityUserId?: null | string;
                        teamId?: string;
                        firstName?: string;
                        lastName?: string;
                        email?: string;
                        userLegacyExternalId?: string;
                        /** @enum {string} */
                        role?: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                        /** @enum {string} */
                        status?: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                        hasAssociatedLicense?: boolean;
                        /** @example null */
                        accountingSupplierId?: null | string;
                        /** @example null */
                        licenseTransferDate?: null | string;
                        /** @example null */
                        numberOfPendingTransactions?: null | number;
                        /** @example null */
                        sharedAccumulationId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TeamMember"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/team-members/{teamMemberId}/permissions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: {
                                id: string;
                                partyId: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        permissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            results: {
                                id: string;
                                partyId: string;
                                /** @enum {string} */
                                permissionType: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team-members/{teamMemberId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                historyId: string;
                                /** @example null */
                                requestId: null | string;
                                fieldChanges: {
                                    field: string;
                                    /** @example null */
                                    oldValue: null | string;
                                    /** @example null */
                                    newValue: null | string;
                                }[];
                                permissionChanges: {
                                    /** @enum {string} */
                                    action: "ADD" | "UPDATE" | "DELETE";
                                    /** @enum {string} */
                                    permission: "CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE";
                                }[];
                                /** @example null */
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                /** @example null */
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/team-members/{teamMemberId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    search: string;
                    type: ("BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR")[];
                    subType?: ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            /** @example null */
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                            /** @example null */
                            parentTeam: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                            };
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            /** @example null */
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                            /** @example null */
                            parentTeam: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/teams/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sortBy?: "name" | "type" | "createdAt";
                    sortDirection?: "ASC" | "DESC";
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    identityTeamIds?: string[];
                    legacyExternalIds?: string[];
                    sharedAccumulationIds?: string[];
                    includeParentTeamRecursively?: boolean;
                    includeChildTeamsRecursively?: boolean;
                    includeTeamTypes?: ("BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR")[];
                    name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["Team"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        legacyExternalId: string;
                        /** @example null */
                        identityTeamId: null | string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        /** @example null */
                        brandId: null | string;
                        /** @example null */
                        parentId: null | string;
                        name: string;
                        isInstantPayEligible?: boolean;
                        useAutoSendStatements: boolean;
                        /** @example null */
                        accountingSupplierId: null | string;
                        /** @example null */
                        accountingCustomerId: null | string;
                        /** @example null */
                        sharedAccumulationId?: null | string;
                        /** @example null */
                        firstPartnerLicenseTransferDate?: null | string;
                        /** @example null */
                        launchDate?: null | string;
                        /** @example null */
                        teamPaymentEmail?: null | string;
                        /** @example null */
                        demandsPaymentsNotes?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        isInstantPayEligible?: boolean;
                        useAutoSendStatements?: boolean;
                        /** @description References the 'brand' team for the given team. If this team is a 'true sub-team' (one of the Extended Offer types) then brandId will be the same as parentId. Otherwise if subType is anything other than one of the Extended Offer types brandId will be the same as teamId. If you need to reference the real team hierarchy (including Expansion Market teams) use parentId instead */
                        brandId?: string;
                        /** @example null */
                        parentId?: null | string;
                        name?: string;
                        /** @example null */
                        accountingSupplierId?: null | string;
                        /** @example null */
                        accountingCustomerId?: null | string;
                        /** @enum {string} */
                        type?: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        /** @example null */
                        firstPartnerLicenseTransferDate?: null | string;
                        /** @example null */
                        sharedAccumulationId?: null | string;
                        /** @example null */
                        launchDate?: null | string;
                        /** @example null */
                        teamPaymentEmail?: null | string;
                        /** @example null */
                        identityTeamId?: null | string;
                        /** @example null */
                        demandsPaymentsNotes?: null | string;
                        /** @example null */
                        partnerUpReferrerId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Team"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/v2/teams/{teamId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    sortBy?: "firstName" | "lastName" | "email";
                    sortDirection?: "ASC" | "DESC";
                    includeParentTeamRecursively?: boolean;
                    includeChildTeamsRecursively?: boolean;
                    includeSideTCs?: boolean;
                    includeStatusTypes?: ("ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED")[];
                    includeRoles?: ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR")[];
                    search?: string;
                };
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["TeamMember"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/teams/{teamId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                };
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["History"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/teams/{teamId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    legacyExternalIds?: string[];
                };
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        names: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        id?: string;
                        externalId?: string;
                        file?: {
                            bucket?: string;
                            filePath?: string;
                            /** @example null */
                            uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                            /** @example null */
                            uploadFailReason?: null | string;
                        };
                        isDeleted?: boolean;
                        commissionLineItemId?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/files/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    legacyExternalIds?: string[];
                };
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        names: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/files/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                    fileId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        id?: string;
                        externalId?: string;
                        file?: {
                            bucket?: string;
                            filePath?: string;
                            /** @example null */
                            uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                            /** @example null */
                            uploadFailReason?: null | string;
                        };
                        isDeleted?: boolean;
                        commissionLineItemId?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @example null */
                            file: null | {
                                id: string;
                                name: string;
                                bucket: string;
                                filePath: string;
                                contentType: null | string;
                                uploadStatus: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                uploadFailReason: null | string;
                                uploadUrl?: string;
                                downloadUrl?: string;
                                createdBy: null | string;
                                /** Format: date-time */
                                createdAt: string;
                                updatedBy: null | string;
                                /** Format: date-time */
                                updatedAt: string;
                            };
                            /** @example null */
                            externalId: null | string;
                            externalTransactionId: string;
                            /** @example null */
                            commissionLineItemId: null | string;
                            /** @example null */
                            createdBy: null | string;
                            /** Format: date-time */
                            createdAt: string;
                            /** @example null */
                            updatedBy: null | string;
                            /** Format: date-time */
                            updatedAt: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/interactions/{interactionId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        teamId: string;
                        teamExternalId: string;
                        /** @enum {string} */
                        type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        address: {
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                        };
                        /** @enum {string} */
                        status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @enum {string} */
                        side: "BUYER" | "SELLER";
                        /** @enum {string} */
                        complianceStatus: "ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER";
                        /** @enum {string} */
                        complianceStage: "ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING";
                        /** @example null */
                        mlsNumber: null | string;
                        /** @enum {string} */
                        mlsStatus: "OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT";
                        /** @example null */
                        closeDate: null | string;
                        /** @example null */
                        listingDate: null | string;
                        /** @example null */
                        expirationDate: null | string;
                        /** @example null */
                        acceptanceDate: null | string;
                        /** @example null */
                        leadSourceName: null | string;
                        /** @example null */
                        leadSourceDetail: null | string;
                        listPrice: number | null;
                        listingPercentage: number | null;
                        salePrice: number | null;
                        sellingPercentage: number | null;
                        startingGrossCommission: number;
                        isRepresentingBothSides: boolean;
                        /** @example null */
                        buyer: null | string;
                        /** @example null */
                        seller: null | string;
                        /** @example null */
                        settlementContactExternalId?: null | string;
                        /** @example null */
                        wireId?: null | string;
                        isPersonalTransaction?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            teamExternalId: string;
                            /** @enum {string} */
                            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            address: {
                                street: string;
                                /** @example null */
                                street2?: null | string;
                                city: string;
                                state: string;
                                zip: string;
                            };
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @enum {string} */
                            side: "BUYER" | "SELLER";
                            /** @example null */
                            mlsNumber: null | string;
                            /** @example null */
                            closeDate: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            /** @example null */
                            expirationDate: null | string;
                            /** @example null */
                            acceptanceDate: null | string;
                            /** @example null */
                            leadSourceName: null | string;
                            /** @example null */
                            leadSourceDetail: null | string;
                            salePrice: number | null;
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            isRepresentingBothSides: boolean;
                            isPaymentReceived: boolean;
                            /** @example null */
                            buyer: null | string;
                            /** @example null */
                            seller: null | string;
                            /** @example null */
                            listingDate: null | string;
                            /** @example null */
                            settlementContactExternalId?: null | string;
                            /** @example null */
                            wireId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: false;
                        settlementContact?: {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    } | {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: true;
                        settlementContact?: null | {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        teamId?: string;
                        teamExternalId?: string;
                        /** @enum {string} */
                        type?: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        address?: {
                            street?: string;
                            city?: string;
                            state?: string;
                            zip?: string;
                        };
                        /** @enum {string} */
                        status?: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @enum {string} */
                        side?: "BUYER" | "SELLER";
                        /** @enum {string} */
                        complianceStatus?: "ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER";
                        /** @enum {string} */
                        complianceStage?: "ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING";
                        /** @enum {string} */
                        commissionStatus?: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                        /** @example null */
                        mlsNumber?: null | string;
                        /** @enum {string} */
                        mlsStatus?: "OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT";
                        /** @example null */
                        closeDate?: null | string;
                        /** @example null */
                        listingDate?: null | string;
                        /** @example null */
                        expirationDate?: null | string;
                        /** @example null */
                        acceptanceDate?: null | string;
                        /** @example null */
                        leadSourceName?: null | string;
                        /** @example null */
                        leadSourceDetail?: null | string;
                        listPrice?: number | null;
                        listingPercentage?: number | null;
                        salePrice?: number | null;
                        sellingPercentage?: number | null;
                        startingGrossCommission?: number;
                        isRepresentingBothSides?: boolean;
                        isPaymentReceived?: boolean;
                        /** @example null */
                        complianceUpdateBlockedBy?: null | string;
                        /** @example null */
                        buyer?: null | string;
                        /** @example null */
                        seller?: null | string;
                        /** @example null */
                        settlementContactExternalId?: null | string;
                        /** @example null */
                        wireId?: null | string;
                        lastModifiedAt?: string;
                        /** @enum {string} */
                        finalizationType?: "INSTANT_PAY";
                        isPersonalTransaction?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            teamExternalId: string;
                            /** @enum {string} */
                            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            address: {
                                street: string;
                                /** @example null */
                                street2?: null | string;
                                city: string;
                                state: string;
                                zip: string;
                            };
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @enum {string} */
                            side: "BUYER" | "SELLER";
                            /** @example null */
                            mlsNumber: null | string;
                            /** @example null */
                            closeDate: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            /** @example null */
                            expirationDate: null | string;
                            /** @example null */
                            acceptanceDate: null | string;
                            /** @example null */
                            leadSourceName: null | string;
                            /** @example null */
                            leadSourceDetail: null | string;
                            salePrice: number | null;
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            isRepresentingBothSides: boolean;
                            isPaymentReceived: boolean;
                            /** @example null */
                            buyer: null | string;
                            /** @example null */
                            seller: null | string;
                            /** @example null */
                            listingDate: null | string;
                            /** @example null */
                            settlementContactExternalId?: null | string;
                            /** @example null */
                            wireId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionFinalizationError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: false;
                        settlementContact?: {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    } | {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: true;
                        settlementContact?: null | {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        teamId?: string;
                        teamExternalId?: string;
                        /** @enum {string} */
                        type?: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        address?: {
                            street?: string;
                            city?: string;
                            state?: string;
                            zip?: string;
                        };
                        /** @enum {string} */
                        status?: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @enum {string} */
                        side?: "BUYER" | "SELLER";
                        /** @enum {string} */
                        complianceStatus?: "ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER";
                        /** @enum {string} */
                        complianceStage?: "ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING";
                        /** @enum {string} */
                        commissionStatus?: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                        /** @example null */
                        mlsNumber?: null | string;
                        /** @enum {string} */
                        mlsStatus?: "OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT";
                        /** @example null */
                        closeDate?: null | string;
                        /** @example null */
                        listingDate?: null | string;
                        /** @example null */
                        expirationDate?: null | string;
                        /** @example null */
                        acceptanceDate?: null | string;
                        /** @example null */
                        leadSourceName?: null | string;
                        /** @example null */
                        leadSourceDetail?: null | string;
                        listPrice?: number | null;
                        listingPercentage?: number | null;
                        salePrice?: number | null;
                        sellingPercentage?: number | null;
                        startingGrossCommission?: number;
                        isRepresentingBothSides?: boolean;
                        isPaymentReceived?: boolean;
                        /** @example null */
                        complianceUpdateBlockedBy?: null | string;
                        /** @example null */
                        buyer?: null | string;
                        /** @example null */
                        seller?: null | string;
                        /** @example null */
                        settlementContactExternalId?: null | string;
                        /** @example null */
                        wireId?: null | string;
                        lastModifiedAt?: string;
                        /** @enum {string} */
                        finalizationType?: "INSTANT_PAY";
                        isPersonalTransaction?: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            teamExternalId: string;
                            /** @enum {string} */
                            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            address: {
                                street: string;
                                /** @example null */
                                street2?: null | string;
                                city: string;
                                state: string;
                                zip: string;
                            };
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @enum {string} */
                            side: "BUYER" | "SELLER";
                            /** @example null */
                            mlsNumber: null | string;
                            /** @example null */
                            closeDate: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            /** @example null */
                            expirationDate: null | string;
                            /** @example null */
                            acceptanceDate: null | string;
                            /** @example null */
                            leadSourceName: null | string;
                            /** @example null */
                            leadSourceDetail: null | string;
                            salePrice: number | null;
                            sellingPercentage: number | null;
                            startingGrossCommission: number;
                            isRepresentingBothSides: boolean;
                            isPaymentReceived: boolean;
                            /** @example null */
                            buyer: null | string;
                            /** @example null */
                            seller: null | string;
                            /** @example null */
                            listingDate: null | string;
                            /** @example null */
                            settlementContactExternalId?: null | string;
                            /** @example null */
                            wireId?: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionFinalizationError"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/transactions/{transactionId}/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: null | string;
                            externalId: string;
                            name: string;
                            teamExternalId: string;
                            /** @enum {string} */
                            role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                            /** @enum {string} */
                            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                            licenseTerminationDate: null | string;
                            hasMetPersonalTransactionLimit?: boolean;
                        } & {
                            delegateFor: string[];
                            additionalPermissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: null | string;
                            externalId: string;
                            name: string;
                            teamExternalId: string;
                            /** @enum {string} */
                            role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                            /** @enum {string} */
                            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                            licenseTerminationDate: null | string;
                            hasMetPersonalTransactionLimit?: boolean;
                        } & {
                            delegateFor: string[];
                            additionalPermissions: ("CAN_VIEW_ASSOCIATE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_COMMISSION_SUMMARY" | "CAN_VIEW_BROKERAGE_SPLITS" | "CAN_VIEW_ESCROW_COMMISSION_SUMMARY" | "CAN_VIEW_FLAT_BROKERAGE_FEE" | "CAN_VIEW_PARENT_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_TEAM_COMMISSION_SUMMARY" | "CAN_VIEW_PARTNER_STATEMENT" | "CAN_VIEW_TEAM_LEAD_STATEMENT" | "CAN_VIEW_ASSOCIATE_STATEMENT" | "CAN_CREATE_FMLS_FEES" | "CAN_EDIT_FEES" | "CAN_EDIT_ASSOCIATE_SPLITS" | "CAN_EDIT_BROKERAGE_SPLITS" | "CAN_EDIT_CO_BROKERAGE" | "CAN_EDIT_COMMISSION_FORM" | "CAN_EDIT_FMLS_PAYER" | "CAN_EDIT_PARENT_TEAM_SPLITS" | "CAN_EDIT_PRE_POST_ON_FEES" | "CAN_EDIT_TEAM_SPLITS" | "CAN_EDIT_ADJUSTMENT" | "CAN_EDIT_INSTANT_PAY_CERTIFICATION" | "CC_ESCROW_STATEMENTS" | "CAN_RECEIVE_STATEMENT" | "CAN_RECEIVE_COMMISSION_FORM_INVITE")[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/calculation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: false;
                        settlementContact?: {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    } | {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: true;
                        settlementContact?: null | {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/calculation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: false;
                        settlementContact?: {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    } | {
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        allocations: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            profile: {
                                id: null | string;
                                externalId: string;
                            };
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            splits?: {
                                agentPercent: number;
                                teamPercent: number;
                                brokeragePercent: number;
                                parentTeamPercent: number;
                            };
                            isDeleted?: boolean;
                        }[];
                        fees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        coBrokerageFees: {
                            id?: string;
                            externalId?: string;
                            /** @enum {string} */
                            type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                            isPre: boolean;
                            amount: number;
                            isPercent: boolean;
                            payee: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            payer: null | {
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "PROFILE" | "TEAM";
                            };
                            attachments: {
                                id?: string;
                                externalId?: string;
                                file?: {
                                    bucket?: string;
                                    filePath?: string;
                                    uploadStatus?: null | ("CREATED" | "UPLOADING" | "PROCESSING" | "COMPLETED" | "FAILED");
                                    uploadFailReason?: null | string;
                                };
                                isDeleted?: boolean;
                                commissionLineItemId?: string;
                            }[];
                            companyName?: null | string;
                            agentName?: null | string;
                            description?: null | string;
                            isDeleted?: boolean;
                        }[];
                        referrals: {
                            id?: string;
                            externalId?: string;
                            amount: number;
                            isPercent: boolean;
                            payee: {
                                id: null | string;
                                externalId: null | string;
                                name: string;
                                /** @enum {string} */
                                type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                brokerageName: null | string;
                                address: null | {
                                    street: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | string;
                                };
                            };
                            description?: null | string;
                            isDeleted?: boolean;
                            externalReferralId?: null | string;
                        }[];
                        /** @enum {string} */
                        submissionType: "ADJUSTMENT" | "SUBMISSION";
                        isPreview: boolean;
                        /** @enum {boolean} */
                        isDraft: true;
                        settlementContact?: null | {
                            externalId?: string;
                            fileNumber?: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            externalId: string;
                            /** @example null */
                            interactionId: null | string;
                            street: string;
                            city: string;
                            state: string;
                            zip: string;
                            clients: string;
                            team: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                name: string;
                                /** @enum {string} */
                                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                /** @example null */
                                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                isFlatFeeTeam: boolean;
                                useSideTMPermissions: boolean;
                                /** @example null */
                                parentTeam: null | {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    /** @enum {string} */
                                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                    isFlatFeeTeam: boolean;
                                    useSideTMPermissions: boolean;
                                };
                            };
                            /** @enum {string} */
                            transactionSide: "BUYER" | "SELLER";
                            /** @enum {string} */
                            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            closeDate: string;
                            salePrice: number;
                            startingGrossCommission: number;
                            adjustedGrossCommission: number | null;
                            isFixedCommission: boolean;
                            commissionPercentage: number | null;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @enum {string} */
                            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            demandTransaction: null | {
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                                hasBeenSubmitted: boolean;
                                /** Format: date-time */
                                updatedAt: string;
                                updatedBy: string;
                            };
                            /** @example null */
                            settlementContact: null | {
                                id: null | string;
                                externalId: string;
                                firstName: string;
                                lastName: string;
                                email: string;
                                phoneNumber: null | string;
                                company: {
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                };
                                fileNumber: null | string;
                            };
                            allocations: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                profile: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    name: string;
                                    teamExternalId: string;
                                    /** @enum {string} */
                                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                                    /** @enum {string} */
                                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                                    /** @example null */
                                    licenseTerminationDate: null | string;
                                    hasMetPersonalTransactionLimit?: boolean;
                                };
                                amount: number;
                                isPercent: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                splits?: {
                                    agentPercent: number;
                                    teamPercent: number;
                                    brokeragePercent: number;
                                    parentTeamPercent: number;
                                    amountOwedToSide: number | null;
                                    expectedBrokeragePercent: number | null;
                                };
                                isCapReached?: boolean;
                                hasMetPersonalTransactionLimit: boolean;
                                gross: {
                                    agent: number | null;
                                    team: number | null;
                                    parentTeam: number | null;
                                    brokerage: number | null;
                                };
                                tax: {
                                    agentAmount: number | null;
                                    teamAmount: number | null;
                                    parentTeamAmount: number | null;
                                };
                                agentNet: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            }[];
                            fees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            coBrokerageFees: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                /** @enum {string} */
                                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                                isPre: boolean;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                /** @example null */
                                payee: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                payer: null | {
                                    id: null | string;
                                    name: string;
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    externalId: string;
                                    /** @enum {string} */
                                    type: "PROFILE" | "TEAM";
                                };
                                /** @example null */
                                companyName: null | string;
                                /** @example null */
                                agentName: null | string;
                                attachments: {
                                    /** @example null */
                                    id: null | string;
                                    externalId: string;
                                    file: {
                                        name: string;
                                    };
                                }[];
                                /** @example null */
                                description?: null | string;
                            }[];
                            referrals: {
                                /** @example null */
                                id: null | string;
                                externalId: string;
                                amount: number;
                                isPercent: boolean;
                                calculatedAmount: number | null;
                                payee: {
                                    /** @example null */
                                    id: null | string;
                                    name: string;
                                    /** @example null */
                                    team: null | {
                                        id: null | string;
                                        externalId: string;
                                        name: string;
                                        /** @enum {string} */
                                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                        isFlatFeeTeam: boolean;
                                        useSideTMPermissions: boolean;
                                        parentTeam: null | {
                                            id: null | string;
                                            externalId: string;
                                            name: string;
                                            /** @enum {string} */
                                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                                            isFlatFeeTeam: boolean;
                                            useSideTMPermissions: boolean;
                                        };
                                    };
                                    /** @example null */
                                    externalId: null | string;
                                    /** @enum {string} */
                                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                                    /** @example null */
                                    brokerageName: null | string;
                                    /** @example null */
                                    address: null | {
                                        street: null | string;
                                        city: null | string;
                                        state: null | string;
                                        zip: null | string;
                                    };
                                };
                                /** @example null */
                                description?: null | string;
                                /** @example null */
                                externalReferralId: null | string;
                            }[];
                            /** @example null */
                            commissionSummary: null | {
                                agentGross: number | null;
                                agentCommission: number | null;
                                teamGross: number | null;
                                teamCommission: number | null;
                                teamTaxAmount: number | null;
                                parentTeamGross: number | null;
                                parentTeamCommission: number | null;
                                parentTeamTaxAmount: number | null;
                                brokerageGross: number | null;
                                brokerageCommission: number | null;
                                escrowAmount: number | null;
                            };
                            /** @enum {string} */
                            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
                            hasInstallmentPayments: boolean;
                            /** Format: date-time */
                            updatedAt: string;
                            updatedBy: string;
                            isInstantPayEligible: boolean;
                            isConciergeLoan: boolean;
                            escrowAmount: number | null;
                            netCommission: number | null;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            latestStatementsSent: boolean;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/statements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE";
                            /** @example null */
                            allocationExternalId: null | string;
                            signedUrl: string;
                            generatedAt: string;
                            fileName: string;
                            /** @example null */
                            sentAt: null | string;
                            isCurrent: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE";
                            /** @example null */
                            allocationExternalId: null | string;
                            signedUrl: string;
                            generatedAt: string;
                            fileName: string;
                            /** @example null */
                            sentAt: null | string;
                            isCurrent: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/interactions/{interactionId}/transactions/{transactionId}/statements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE";
                            /** @example null */
                            allocationExternalId: null | string;
                            signedUrl: string;
                            generatedAt: string;
                            fileName: string;
                            /** @example null */
                            sentAt: null | string;
                            isCurrent: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            /** @enum {string} */
                            type: "ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE";
                            /** @example null */
                            allocationExternalId: null | string;
                            signedUrl: string;
                            generatedAt: string;
                            fileName: string;
                            /** @example null */
                            sentAt: null | string;
                            isCurrent: boolean;
                        }[];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/transactions/{transactionId}/mark-statements-sent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @enum {string} */
                            status: "ok";
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * @deprecated
         * @description Use /me root instead
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            profileExternalIds: string[];
                            roles: ("AUDITOR" | "INTERNAL" | "PAYMENT_SPECIALIST" | "CUSTOMER_CARE" | "GO_TO_MARKET")[];
                            /** @enum {string} */
                            paymentSetupStatus: "NOT_REQUIRED" | "COMPLETE" | "INCOMPLETE";
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            profileExternalIds: string[];
                            roles: ("AUDITOR" | "INTERNAL" | "PAYMENT_SPECIALIST" | "CUSTOMER_CARE" | "GO_TO_MARKET")[];
                            /** @enum {string} */
                            paymentSetupStatus: "NOT_REQUIRED" | "COMPLETE" | "INCOMPLETE";
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/payment-portal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query: {
                    returnUrl: string;
                    flow?: "UPDATE_PAYMENT_METHOD" | "PORTAL";
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            url: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tax-documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    year?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            year: number;
                            parties: components["schemas"]["ResolvedParty"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/tax-documents/{partyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    year?: number;
                };
                header?: never;
                path: {
                    partyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            type: string;
                            format: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/me/platform-fee": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description The current user's total past due balance for all outstanding platform fee invoices. */
                            pastDueBalance: number;
                            /** @example null */
                            oldestPastDueInvoiceDueDate: null | string;
                            /** @description The number of platform fees the user is currently paying. */
                            activePlatformFeesPaying: number;
                            /** @description Whether the user has a default payment method set. */
                            hasDefaultPaymentMethod: boolean;
                            /** @description Whether the current user's default payment method is valid. */
                            hasValidDefaultPaymentMethod: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notification-recipients/{notificationRecipientId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    notificationRecipientId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        failedReason?: null | string;
                        /** @enum {string} */
                        status?: "SUCCESSFUL" | "PENDING" | "REJECTED" | "HARD_BOUNCE" | "SOFT_BOUNCE";
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            email: string;
                            /** @enum {string} */
                            status: "SUCCESSFUL" | "PENDING" | "REJECTED" | "HARD_BOUNCE" | "SOFT_BOUNCE";
                            /** @example null */
                            failedReason: null | string;
                            message: string;
                            /** @example null */
                            createdBy: null | string;
                            /** @example null */
                            createdAt: null | string;
                            /** @example null */
                            updatedBy: null | string;
                            /** @example null */
                            updatedAt: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/notification-recipients/event": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        messageId: string;
                        /** @enum {string} */
                        state: "BOUNCED" | "SOFT_BOUNCED" | "SENT" | "DEFERRAL" | "SPAM" | "UNSUB" | "REJECTED";
                        msg: {
                            email: string;
                        };
                        /** @example null */
                        bounceDescription: null | string;
                        /** @example null */
                        template: null | ("payments-instant-pay-certification" | "payments-escrow-commission-statement" | "payments-agent-commission-statement" | "payments-agent-final-commission-statement" | "payments-commission-form-invite" | "payments-settlement-run");
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            email: string;
                            /** @enum {string} */
                            status: "SUCCESSFUL" | "PENDING" | "REJECTED" | "HARD_BOUNCE" | "SOFT_BOUNCE";
                            /** @example null */
                            failedReason: null | string;
                            message: string;
                            /** @example null */
                            createdBy: null | string;
                            /** @example null */
                            createdAt: null | string;
                            /** @example null */
                            updatedBy: null | string;
                            /** @example null */
                            updatedAt: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/expected-payments/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED";
                        gciPostFee: number;
                        opportunityId: string;
                        /** @example null */
                        opportunityState: null | string;
                        /** @example null */
                        interactionId: null | string;
                        /** @example null */
                        transactionId: null | string;
                        opportunityName: string;
                        /** @example null */
                        workdayCustomerId: null | string;
                        escrowCompany: string;
                        eventId: string;
                        /** Format: date */
                        closeDate: string;
                        /** @example null */
                        modernTreasuryFilteringLogic: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExpectedPayment"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/expected-payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    paymentId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        status: "ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED";
                        gciPostFee?: number;
                        opportunityId?: string;
                        /** @example null */
                        opportunityState?: null | string;
                        opportunityName?: string;
                        /** @example null */
                        interactionId?: null | string;
                        /** @example null */
                        transactionId?: null | string;
                        /** @example null */
                        workdayCustomerId?: null | string;
                        /** @example null */
                        modernTreasuryFilteringLogic?: null | string;
                        escrowCompany?: string;
                        eventId: string;
                        /** Format: date */
                        closeDate?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExpectedPayment"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/external-agents/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                name: string;
                                brokerageName: string;
                                address: {
                                    /** @example null */
                                    street1: null | string;
                                    /** @example null */
                                    street2: null | string;
                                    /** @example null */
                                    city: null | string;
                                    /** @example null */
                                    state: null | string;
                                    /** @example null */
                                    zip: null | (string);
                                    /** @example null */
                                    county: null | string;
                                    /** @example null */
                                    country: null | string;
                                };
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        brokerageName: string;
                        address: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            brokerageName: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external-agents/{externalAgentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    externalAgentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            brokerageName: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    externalAgentId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        brokerageName?: string;
                        address?: {
                            /** @example null */
                            street1?: null | string;
                            /** @example null */
                            street2?: null | string;
                            /** @example null */
                            state?: null | string;
                            /** @example null */
                            city?: null | string;
                            /** @example null */
                            zip?: null | (string);
                            /** @example null */
                            county?: null | string;
                            /** @example null */
                            country?: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            brokerageName: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/external-companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    ids?: string[];
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                name: string;
                                address: {
                                    /** @example null */
                                    street1: null | string;
                                    /** @example null */
                                    street2: null | string;
                                    /** @example null */
                                    city: null | string;
                                    /** @example null */
                                    state: null | string;
                                    /** @example null */
                                    zip: null | (string);
                                    /** @example null */
                                    county: null | string;
                                    /** @example null */
                                    country: null | string;
                                };
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        name: string;
                        address: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external-companies/{externalCompanyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    externalCompanyId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    externalCompanyId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name?: string;
                        address?: {
                            /** @example null */
                            street1?: null | string;
                            /** @example null */
                            street2?: null | string;
                            /** @example null */
                            state?: null | string;
                            /** @example null */
                            city?: null | string;
                            /** @example null */
                            zip?: null | (string);
                            /** @example null */
                            county?: null | string;
                            /** @example null */
                            country?: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            name: string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/external-invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetches all of the external invoices from SFCD for a given opportunity */
        get: {
            parameters: {
                query: {
                    opportunityId: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                opportunityId: string;
                                /** @example null */
                                accountingInvoiceId: null | string;
                                /** @enum {string} */
                                type: "CUSTOMER" | "SUPPLIER";
                                /** @example null */
                                invoiceDate: null | string;
                                /** @example null */
                                paymentDate: null | string;
                                invoiceAmount: number;
                                taxAmount: number | null;
                                amountDue: number;
                                /** @example null */
                                escrowCompanyId: null | string;
                                /** @example null */
                                supplierTeamContactId: null | string;
                                /** @example null */
                                supplierAccountId: null | string;
                                /** @example null */
                                accountingPayeeId: null | string;
                                /** @example null */
                                integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                                /** @example null */
                                additionalWireId: null | string;
                                /** @example null */
                                accountingErrorMsg: null | string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        opportunityId: string;
                        /** @enum {string} */
                        type: "CUSTOMER" | "SUPPLIER";
                        /** @example null */
                        invoiceDate: null | string;
                        /** @example null */
                        paymentDate: null | string;
                        taxAmount: number | null;
                        /** @example null */
                        escrowCompanyId: null | string;
                        /** @example null */
                        supplierTeamContactId: null | string;
                        /** @example null */
                        supplierAccountId: null | string;
                        /** @example null */
                        integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /** @example null */
                        additionalWireId: null | string;
                        /** @example null */
                        accountingErrorMsg: null | string;
                        invoiceLines: {
                            amount: number;
                            /** @example null */
                            spendCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_RENTAL_FEE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "SC_EO_INSURANCE" | "ECOMMISSION_PAID_BY_TITLE" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEES_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "REGIONAL_FEE_PAID_BY_SIDE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_E_O_FEE");
                            /** @example null */
                            revenueCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INACTIVE_RERM_FEE_PAID_BY_SIDE");
                            /** @example null */
                            taxCode: null | string;
                            /** @example null */
                            agentCommissionId?: null | string;
                            /** @example null */
                            demandTransactionDetailId?: null | string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalInvoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/external-invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetches an external invoice from SFCD by ID */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalInvoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        /** @description Updates an external invoice in SFCD. Puts all of its invoice lines */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type?: "CUSTOMER" | "SUPPLIER";
                        /** @example null */
                        invoiceDate?: null | string;
                        /** @example null */
                        paymentDate?: null | string;
                        taxAmount?: number | null;
                        /** @example null */
                        escrowCompanyId?: null | string;
                        /** @example null */
                        supplierTeamContactId?: null | string;
                        /** @example null */
                        supplierAccountId?: null | string;
                        /** @example null */
                        integrationStatus?: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /** @example null */
                        additionalWireId?: null | string;
                        /** @example null */
                        accountingErrorMsg?: null | string;
                        /** @description You are required to provide all of the invoice lines for the invoice you are updating. The endpoint will assume that any missing lines should be deleted, and any extra lines should be created. For lines the endpoint should create, provide a new uuid for the id. */
                        invoiceLines?: {
                            id?: string;
                            amount: number;
                            /** @example null */
                            spendCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_RENTAL_FEE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "SC_EO_INSURANCE" | "ECOMMISSION_PAID_BY_TITLE" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEES_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "REGIONAL_FEE_PAID_BY_SIDE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_E_O_FEE");
                            /** @example null */
                            revenueCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INACTIVE_RERM_FEE_PAID_BY_SIDE");
                            /** @example null */
                            taxCode: null | string;
                            /** @example null */
                            agentCommissionId?: null | string;
                            /** @example null */
                            demandTransactionDetailId?: null | string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalInvoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        type?: "CUSTOMER" | "SUPPLIER";
                        /** @example null */
                        invoiceDate?: null | string;
                        /** @example null */
                        paymentDate?: null | string;
                        taxAmount?: number | null;
                        /** @example null */
                        escrowCompanyId?: null | string;
                        /** @example null */
                        supplierTeamContactId?: null | string;
                        /** @example null */
                        supplierAccountId?: null | string;
                        /** @example null */
                        integrationStatus?: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /** @example null */
                        additionalWireId?: null | string;
                        /** @example null */
                        accountingErrorMsg?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ExternalInvoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/external-invoice-lines/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Fetches all of the external invoice lines from SFDC for a given invoice */
        get: {
            parameters: {
                query?: {
                    invoiceId?: string;
                    invoiceIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: components["schemas"]["ExternalInvoiceLineItem"][];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/referral-companies/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    legacyExternalIds?: string[];
                    ids?: string[];
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                id: string;
                                /** @example null */
                                legacyExternalId: null | string;
                                name: string;
                                /** @example null */
                                accountingSupplierId: null | string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/etl/mergeUser/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        primaryUser: {
                            userId: string;
                            /** @example null */
                            salesforceContactId?: null | string;
                            /** @example null */
                            firebaseUserId?: null | string;
                        };
                        secondaryUser: {
                            userId: string;
                            /** @example null */
                            salesforceContactId?: null | string;
                            /** @example null */
                            firebaseUserId?: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoiceId}/accounting": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description RPC endpoint for creating invoice within accounting service (currently Workday) */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            externalId: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint for searching invoices by query string parameters */
        get: {
            parameters: {
                query?: {
                    legacyExternalIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @description Endpoint for creating invoices */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The salesforce ID of the invoice. Mapped from Id
                         * @example a3oVu0000003mMfIAI
                         */
                        legacyExternalId: null | string;
                        /**
                         * @description Unknown status field.
                         * @example null
                         */
                        accountingStatus: null | ("SUBMITTED" | "PENDING");
                        /**
                         * @description An additional wire ID. Used for invoices that pay external vendors like Zillow for certain leads.
                         * @example BBSE-9042-FDRK
                         */
                        additionalWireId: null | string;
                        /**
                         * @description The UUID of the commission that this invoice is associated with. commission.legacyExternalId maps to the salesforce Invoice.Opportunity__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        commissionId: string;
                        /** @description The date of the invoices creation. This is set to the date of closing during the invoice generation process. */
                        date: string;
                        /**
                         * @description The current status of the invoice regarding our accounting system. Updated after the invoice is sent to the accounting system.
                         * @example null
                         */
                        integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /**
                         * @description A name for the invoice. Mapped from Invoice.Name
                         * @example 9082
                         */
                        name: string;
                        /**
                         * @description The accounting systems auto-generated invoice number. This is set by the accounting system after we send over the invoice data
                         * @default null
                         * @example CINV-54737
                         */
                        number: null | string;
                        /**
                         * @description The UUID of the party that this invoice is associated with. Mapped from Invoice.Team_Supplier__c, Invoice.Team_Member_Supplier__c, or Invoice.Customer__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        partyId: string;
                        /**
                         * @description The date the invoice was paid. Mapped from Invoice.Payment_Date__c
                         * @example null
                         */
                        paymentDate: null | string;
                        /** @description Whether the invoice requires a wire ID. */
                        requiresWireId: boolean;
                        /**
                         * @description The tax amount of the invoice. Mapped from Invoice.Tax_Amount__c
                         * @example null
                         */
                        taxAmount: null | number;
                        /**
                         * @description Whether the invoice is a customer or supplier invoice. This determines which type of party the invoice is likely associated with.
                         * @enum {string}
                         */
                        type: "CUSTOMER" | "SUPPLIER";
                        /**
                         * @description An error message from the accounting system (if we receive one after sending over an invoice)
                         * @example Validation error occurred. Invalid ID value.
                         */
                        workdayErrorMessage: null | string;
                        lineItems: {
                            /**
                             * @description The salesforce ID of the invoice line item. Mapped from Id
                             * @example null
                             */
                            legacyExternalId: null | string;
                            /**
                             * @description The category of the line item. Mapped from Invoice.Spend_Category__c and Invoice.Revenue_Category__c
                             * @enum {string}
                             */
                            accountingCategory: "ADJUSTMENT_PAID_BY_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INACTIVE_E_O_FEE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_RERM_FEE_PAID_BY_SIDE" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "REGIONAL_FEE_PAID_BY_SIDE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_EO_INSURANCE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "SC_RENTAL_FEE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TC_FEES_PAID_BY_SIDE" | "TEAM_FEE_PAID_BY_SIDE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "WIRE_FEE_PAID_BY_TITLE";
                            /**
                             * @description The allocation UUID the this line is associated with. Mapped from Invoice.Agent_Commission__c
                             * @example null
                             */
                            allocationId: null | string;
                            /** @description The amount of the invoice line item. Mapped from Invoice.Amount__c */
                            amount: number;
                            /**
                             * @description The commission line item UUID. An invoice line item will either have an allocationId or a commissionLineItemId. Mapped from Invoice.Demand_Transaction_Detail__c
                             * @example null
                             */
                            commissionLineItemId: null | string;
                            /**
                             * @description The tax code generated from our tax code from zipcode lookup system.
                             * @example null
                             */
                            taxCode: null | string;
                            invoiceId?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Endpoint for updating invoices - invoice and line items are treated as a PUT, so all line items must be included in the request body */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The salesforce ID of the invoice. Mapped from Id
                         * @example a3oVu0000003mMfIAI
                         */
                        legacyExternalId: null | string;
                        /**
                         * @description Unknown status field.
                         * @example null
                         */
                        accountingStatus: null | ("SUBMITTED" | "PENDING");
                        /**
                         * @description An additional wire ID. Used for invoices that pay external vendors like Zillow for certain leads.
                         * @example BBSE-9042-FDRK
                         */
                        additionalWireId: null | string;
                        /**
                         * @description The UUID of the commission that this invoice is associated with. commission.legacyExternalId maps to the salesforce Invoice.Opportunity__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        commissionId: string;
                        /** @description The date of the invoices creation. This is set to the date of closing during the invoice generation process. */
                        date: string;
                        /**
                         * @description The current status of the invoice regarding our accounting system. Updated after the invoice is sent to the accounting system.
                         * @example null
                         */
                        integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /**
                         * @description A name for the invoice. Mapped from Invoice.Name
                         * @example 9082
                         */
                        name: string;
                        /**
                         * @description The accounting systems auto-generated invoice number. This is set by the accounting system after we send over the invoice data
                         * @default null
                         * @example CINV-54737
                         */
                        number: null | string;
                        /**
                         * @description The UUID of the party that this invoice is associated with. Mapped from Invoice.Team_Supplier__c, Invoice.Team_Member_Supplier__c, or Invoice.Customer__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        partyId: string;
                        /**
                         * @description The date the invoice was paid. Mapped from Invoice.Payment_Date__c
                         * @example null
                         */
                        paymentDate: null | string;
                        /** @description Whether the invoice requires a wire ID. */
                        requiresWireId: boolean;
                        /**
                         * @description The tax amount of the invoice. Mapped from Invoice.Tax_Amount__c
                         * @example null
                         */
                        taxAmount: null | number;
                        /**
                         * @description Whether the invoice is a customer or supplier invoice. This determines which type of party the invoice is likely associated with.
                         * @enum {string}
                         */
                        type: "CUSTOMER" | "SUPPLIER";
                        /**
                         * @description An error message from the accounting system (if we receive one after sending over an invoice)
                         * @example Validation error occurred. Invalid ID value.
                         */
                        workdayErrorMessage: null | string;
                        lineItems: {
                            /**
                             * @description The salesforce ID of the invoice line item. Mapped from Id
                             * @example null
                             */
                            legacyExternalId: null | string;
                            /**
                             * @description The category of the line item. Mapped from Invoice.Spend_Category__c and Invoice.Revenue_Category__c
                             * @enum {string}
                             */
                            accountingCategory: "ADJUSTMENT_PAID_BY_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INACTIVE_E_O_FEE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_RERM_FEE_PAID_BY_SIDE" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "REGIONAL_FEE_PAID_BY_SIDE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_EO_INSURANCE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "SC_RENTAL_FEE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TC_FEES_PAID_BY_SIDE" | "TEAM_FEE_PAID_BY_SIDE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "WIRE_FEE_PAID_BY_TITLE";
                            /**
                             * @description The allocation UUID the this line is associated with. Mapped from Invoice.Agent_Commission__c
                             * @example null
                             */
                            allocationId: null | string;
                            /** @description The amount of the invoice line item. Mapped from Invoice.Amount__c */
                            amount: number;
                            /**
                             * @description The commission line item UUID. An invoice line item will either have an allocationId or a commissionLineItemId. Mapped from Invoice.Demand_Transaction_Detail__c
                             * @example null
                             */
                            commissionLineItemId: null | string;
                            /**
                             * @description The tax code generated from our tax code from zipcode lookup system.
                             * @example null
                             */
                            taxCode: null | string;
                            invoiceId?: string;
                            id?: string;
                        }[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** @description Endpoint for deleting invoices */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** @description Endpoint for updating invoices without invoice lines */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description The salesforce ID of the invoice. Mapped from Id
                         * @example a3oVu0000003mMfIAI
                         */
                        legacyExternalId?: null | string;
                        /**
                         * @description Unknown status field.
                         * @example null
                         */
                        accountingStatus?: null | ("SUBMITTED" | "PENDING");
                        /**
                         * @description An additional wire ID. Used for invoices that pay external vendors like Zillow for certain leads.
                         * @example BBSE-9042-FDRK
                         */
                        additionalWireId?: null | string;
                        /**
                         * @description The UUID of the commission that this invoice is associated with. commission.legacyExternalId maps to the salesforce Invoice.Opportunity__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        commissionId?: string;
                        /** @description The date of the invoices creation. This is set to the date of closing during the invoice generation process. */
                        date?: string;
                        /**
                         * @description The current status of the invoice regarding our accounting system. Updated after the invoice is sent to the accounting system.
                         * @example null
                         */
                        integrationStatus?: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
                        /**
                         * @description A name for the invoice. Mapped from Invoice.Name
                         * @example 9082
                         */
                        name?: string;
                        /**
                         * @description The accounting systems auto-generated invoice number. This is set by the accounting system after we send over the invoice data
                         * @default null
                         * @example CINV-54737
                         */
                        number?: null | string;
                        /**
                         * @description The UUID of the party that this invoice is associated with. Mapped from Invoice.Team_Supplier__c, Invoice.Team_Member_Supplier__c, or Invoice.Customer__c
                         * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
                         */
                        partyId?: string;
                        /**
                         * @description The date the invoice was paid. Mapped from Invoice.Payment_Date__c
                         * @example null
                         */
                        paymentDate?: null | string;
                        /** @description Whether the invoice requires a wire ID. */
                        requiresWireId?: boolean;
                        /**
                         * @description The tax amount of the invoice. Mapped from Invoice.Tax_Amount__c
                         * @example null
                         */
                        taxAmount?: null | number;
                        /**
                         * @description Whether the invoice is a customer or supplier invoice. This determines which type of party the invoice is likely associated with.
                         * @enum {string}
                         */
                        type?: "CUSTOMER" | "SUPPLIER";
                        /**
                         * @description An error message from the accounting system (if we receive one after sending over an invoice)
                         * @example Validation error occurred. Invalid ID value.
                         */
                        workdayErrorMessage?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Invoice"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/invoice-line-items/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint for searching for invoice line items by query string parameters */
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    legacyExternalIds?: string[];
                    invoiceIds?: string[];
                    invoiceLegacyExternalIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InvoiceLineItem"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @description Endpoint for creating invoice line items without invoice. */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The salesforce ID of the invoice line item. Mapped from Id
                         * @example null
                         */
                        legacyExternalId: null | string;
                        /**
                         * @description The category of the line item. Mapped from Invoice.Spend_Category__c and Invoice.Revenue_Category__c
                         * @enum {string}
                         */
                        accountingCategory: "ADJUSTMENT_PAID_BY_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INACTIVE_E_O_FEE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_RERM_FEE_PAID_BY_SIDE" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "REGIONAL_FEE_PAID_BY_SIDE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_EO_INSURANCE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "SC_RENTAL_FEE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TC_FEES_PAID_BY_SIDE" | "TEAM_FEE_PAID_BY_SIDE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "WIRE_FEE_PAID_BY_TITLE";
                        /**
                         * @description The allocation UUID the this line is associated with. Mapped from Invoice.Agent_Commission__c
                         * @example null
                         */
                        allocationId: null | string;
                        /** @description The amount of the invoice line item. Mapped from Invoice.Amount__c */
                        amount: number;
                        /**
                         * @description The commission line item UUID. An invoice line item will either have an allocationId or a commissionLineItemId. Mapped from Invoice.Demand_Transaction_Detail__c
                         * @example null
                         */
                        commissionLineItemId: null | string;
                        /**
                         * @description The tax code generated from our tax code from zipcode lookup system.
                         * @example null
                         */
                        taxCode: null | string;
                        invoiceId?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InvoiceLineItem"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/invoice-line-items/{invoiceLineItemId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Endpoint for updating invoice liness without the parent invoice */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceLineItemId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The salesforce ID of the invoice line item. Mapped from Id
                         * @example null
                         */
                        legacyExternalId: null | string;
                        /**
                         * @description The category of the line item. Mapped from Invoice.Spend_Category__c and Invoice.Revenue_Category__c
                         * @enum {string}
                         */
                        accountingCategory: "ADJUSTMENT_PAID_BY_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INACTIVE_E_O_FEE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_RERM_FEE_PAID_BY_SIDE" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "REGIONAL_FEE_PAID_BY_SIDE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_EO_INSURANCE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "SC_RENTAL_FEE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TC_FEES_PAID_BY_SIDE" | "TEAM_FEE_PAID_BY_SIDE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "WIRE_FEE_PAID_BY_TITLE";
                        /**
                         * @description The allocation UUID the this line is associated with. Mapped from Invoice.Agent_Commission__c
                         * @example null
                         */
                        allocationId: null | string;
                        /** @description The amount of the invoice line item. Mapped from Invoice.Amount__c */
                        amount: number;
                        /**
                         * @description The commission line item UUID. An invoice line item will either have an allocationId or a commissionLineItemId. Mapped from Invoice.Demand_Transaction_Detail__c
                         * @example null
                         */
                        commissionLineItemId: null | string;
                        /**
                         * @description The tax code generated from our tax code from zipcode lookup system.
                         * @example null
                         */
                        taxCode: null | string;
                        invoiceId?: string;
                        id?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["InvoiceLineItem"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        /** @description Endpoint for deleting invoice lines without the parent invoice */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    invoiceLineItemId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/{jobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint for fetching one job by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** @description Endpoint for deleting jobs */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/jobs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Endpoint for creating jobs */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * @description The type of job being performed.
                         * @example ASSIGN_PRICING_TEMPLATE_TO_TEAM_MEMBERS
                         * @enum {string}
                         */
                        type: "ASSIGN_PRICING_TEMPLATE_TO_TEAM_MEMBERS" | "PROCESS_SETTLEMENT_RUN";
                        requestBody: {
                            /**
                             * Format: uuid
                             * @description The UUID of the pricing plan template to assign to team members.
                             */
                            pricingPlanTemplateId: string;
                            teamMemberLegacyExternalIds: string[];
                        } | {
                            /** @description The ID of the settlement run to process. */
                            settlementRunId: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Job"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job-tasks/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint for searching job tasks by query string parameters */
        get: {
            parameters: {
                query?: {
                    ids?: string[];
                    jobIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobTask"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        /** @description Endpoint for creating job tasks */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /**
                         * Format: uuid
                         * @description The UUID of the job this task belongs to.
                         */
                        jobId: string;
                        requestBody: {
                            /** @description The settlement run ID from Workday. */
                            settlementRunId: string;
                            /** @description The transaction reference from Workday for the payment. */
                            transactionReferenceId?: string;
                            /** @description The property address for transaction. */
                            propertyAddress?: string;
                            /** @description The priority of the payment request. Can be "high", "normal" or undefined. */
                            priority?: "high" | "normal";
                            /**
                             * @description The fallback type for the funds transfer.
                             * @enum {string}
                             */
                            fallbackType?: "ach";
                            /** @description The memo for the payment. */
                            paymentMemo?: string;
                            /** @description The invoice number. */
                            invoiceNumber: string;
                            /**
                             * @description The funds transfer type.
                             * @enum {string}
                             */
                            paymentType: "ACH_MANUAL" | "CHECK_MANUAL" | "WIRE_MANUAL" | "EFT" | "CHECK" | "ACH";
                            /** @description The settlement bank account reference string. */
                            settlementBankAccount: string;
                            /** @description The amount of the payment in dollars. */
                            paymentAmount: string;
                            /** @description The statement descriptor for the payment. */
                            statementDescriptor?: string;
                            /** @description The Workday ID for the payment. */
                            workdayTransactionId: string;
                            /** @description The external Modern Treasury account ID that is receiving the payment. */
                            externalAccountId: string;
                        } | {
                            /**
                             * Format: uuid
                             * @description The UUID of the pricing plan template to assign to team members.
                             */
                            pricingPlanTemplateId: string;
                            /** @description The legacy external ID of the team member to assign the pricing plan template to. */
                            teamMemberLegacyExternalId: string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobTask"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/job-tasks/{jobTaskId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Endpoint for fetching one job task by id */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobTaskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobTask"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /** @description Endpoint for deleting job tasks */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobTaskId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /** @description Endpoint for updating job tasks */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    jobTaskId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description The error message for job task if it failed. */
                        errorMessage?: null | string;
                        /**
                         * @description The status of the job task.
                         * @enum {string}
                         */
                        status?: "FAILED" | "FAILED_PENDING_RETRY" | "PENDING" | "PROCESSING" | "SUCCEEDED" | "SUCCEEDED_NO_OP";
                    } & {
                        /** @description The response body for the job task if a request was made to a third-party. */
                        responseBody?: null | {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["JobTask"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/admin/transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    sort?: string;
                    offset?: number;
                    limit?: number;
                    search?: string;
                    ids?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            count: number;
                            results: components["schemas"]["AdminTransaction"][];
                            /** @example null */
                            next: null | string;
                            /** @example null */
                            previous: null | string;
                            /** @example null */
                            facets?: null | {
                                paymentStatusGroup: {
                                    ALL: number;
                                    NEEDS_ATTENTION: number;
                                    CLOSING_SOON: number;
                                    IN_PROGRESS: number;
                                    COMPLETE: number;
                                };
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/transactions/{transactionId}/installments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminTransaction"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        create: {
                            /** Format: date */
                            closeDate: string;
                            amount: number;
                        }[];
                        update: {
                            id: string;
                            /** Format: date */
                            closeDate: string;
                            amount: number;
                        }[];
                        cancel: string[];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminTransaction"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/transactions/{transactionId}/allocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminAllocation"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/transactions/{transactionId}/colists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminTransaction"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        parent: components["schemas"]["CoListParent"];
                        create: components["schemas"]["CoListCreate"];
                    } | {
                        parent: components["schemas"]["CoListParent"];
                        update: components["schemas"]["CoListUpdate"];
                    } | {
                        parent: components["schemas"]["CoListParent"];
                    } | {
                        update: components["schemas"]["CoListUpdate"];
                    } | {
                        cancelId: string;
                        parent?: components["schemas"]["CoListParent"];
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminTransaction"][];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/adjustments/{opportunityLegacyExternalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    opportunityLegacyExternalId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AdminAdjustment"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    opportunityLegacyExternalId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["AdminAdjustmentPostBody"];
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                422: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TransactionCalculationError"] | components["schemas"]["Error"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/transactions/{transactionId}/dispatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        statementTypes: ("ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE")[];
                        lastModifiedAt: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/interactions/{interactionId}/transactions/{transactionId}/dispatch": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    interactionId: string;
                    transactionId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        statementTypes: ("ESCROW" | "PARTNER" | "TEAM_LEAD" | "ASSOCIATE")[];
                        lastModifiedAt: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/external-referrals/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        teamMemberId: string;
                        amount: number;
                        /** Format: date */
                        paymentDate: string;
                        address: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            transactionLegacyExternalId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/opportunities/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    legacyExternalIds?: string[];
                    parentLegacyExternalIds?: string[];
                    statuses?: ("CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE")[];
                    closeDateLessThanOrEqualTo?: string;
                    closeDateGreaterThanOrEqualTo?: string;
                    hasDemandTransaction?: boolean;
                    excludeDemandTransactionStatuses?: ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED")[];
                    excludeStatuses?: ("CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE")[];
                    demandTransactionSubmitted?: boolean;
                    demandTransactionStatuses?: ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED")[];
                    settlementContactLegacyExternalIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                /** @example null */
                                id: null | string;
                                /** @example null */
                                acceptanceDate: null | string;
                                address: {
                                    /** @example null */
                                    street1: null | string;
                                    /** @example null */
                                    street2: null | string;
                                    /** @example null */
                                    city: null | string;
                                    /** @example null */
                                    state: null | string;
                                    /** @example null */
                                    zip: null | (string);
                                    /** @example null */
                                    county: null | string;
                                    /** @example null */
                                    country: null | string;
                                };
                                adjustedGrossCommission: number | null;
                                /** @example null */
                                allDemandsSignedDate: null | string;
                                brokerageGrossCommission: number | null;
                                brokerageNetCommission: number | null;
                                /** @example null */
                                buyerNames: null | string;
                                /** @example null */
                                closeDate: null | string;
                                /** @example null */
                                commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                                /** @example null */
                                commissionSystem: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                                /** @example null */
                                complianceCompletionDate: null | string;
                                /** @example null */
                                complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                                /** @example null */
                                complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                                /** @example null */
                                demandFormSubmittedOn: null | string;
                                /** @example null */
                                demandTransactionLegacyExternalId: null | string;
                                escrowAmount: number | null;
                                /** @example null */
                                escrowNumber: null | string;
                                /** @example null */
                                expirationDate: null | string;
                                hasAllInvoicesPaid: boolean;
                                hasCoBrokerageFees: boolean;
                                hasInstantPayEligibleTeamMember: boolean;
                                /** @example null */
                                instantPayParticipation: null | string;
                                /** @example null */
                                interactionId: null | string;
                                isCoList: boolean;
                                isConciergeLoan: boolean;
                                isOriginalInstallmentPayment: boolean;
                                isPaymentReceived: boolean;
                                isRepresentingBothSides: boolean;
                                /** Format: date-time */
                                lastModifiedDate: string;
                                /** @example null */
                                leadSourceDetail: null | string;
                                /** @example null */
                                leadSourceName: null | string;
                                legacyExternalId: string;
                                /** @example null */
                                listingDate: null | string;
                                listingPercentage: number | null;
                                listPrice: number | null;
                                /** @example null */
                                mlsNumber: null | string;
                                /** @example null */
                                mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                                /** @example null */
                                modifiedByUser: null | string;
                                /** @example null */
                                name: null | string;
                                /** @example null */
                                offMarketListingNotes: null | string;
                                /** @example null */
                                onBehalfOfTeamMemberLegacyExternalId: null | string;
                                /** @example null */
                                origin: null | string;
                                /** @example null */
                                parentTransactionLegacyExternalId: null | string;
                                /** @enum {string} */
                                representing: "BUYER" | "SELLER";
                                salePrice: number;
                                /** @example null */
                                sellerNames: null | string;
                                sellingPercentage: number | null;
                                /** @example null */
                                settlementContactLegacyExternalId: null | string;
                                startingGrossCommission: number;
                                /** @enum {string} */
                                status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                                /** @example null */
                                teamLegacyExternalId: null | string;
                                /** @example null */
                                transactionReportingId: null | string;
                                /** @enum {string} */
                                type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                                /** @example null */
                                upstreamUpdateErrorMessage: null | string;
                                /** @example null */
                                wireId: null | string;
                                isPersonalTransaction: boolean;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        /** @example null */
                        acceptanceDate: null | string;
                        address: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                        adjustedGrossCommission: number | null;
                        /** @example null */
                        allDemandsSignedDate: null | string;
                        brokerageGrossCommission: number | null;
                        brokerageNetCommission: number | null;
                        /** @example null */
                        buyerNames: null | string;
                        /** @example null */
                        closeDate: null | string;
                        /** @example null */
                        commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        /** @example null */
                        commissionSystem: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                        /** @example null */
                        complianceCompletionDate: null | string;
                        /** @example null */
                        complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                        /** @example null */
                        complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                        /** @example null */
                        demandFormSubmittedOn: null | string;
                        /** @example null */
                        demandTransactionLegacyExternalId: null | string;
                        escrowAmount: number | null;
                        /** @example null */
                        escrowNumber: null | string;
                        /** @example null */
                        expirationDate: null | string;
                        /** @example null */
                        instantPayParticipation: null | string;
                        /** @example null */
                        interactionId: null | string;
                        isCoList: boolean;
                        isConciergeLoan: boolean;
                        isOriginalInstallmentPayment: boolean;
                        isPaymentReceived: boolean;
                        isRepresentingBothSides: boolean;
                        /** @example null */
                        leadSourceDetail: null | string;
                        /** @example null */
                        leadSourceName: null | string;
                        /** @example null */
                        listingDate: null | string;
                        listingPercentage: number | null;
                        listPrice: number | null;
                        /** @example null */
                        mlsNumber: null | string;
                        /** @example null */
                        mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                        /** @example null */
                        name: null | string;
                        /** @example null */
                        offMarketListingNotes: null | string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId: null | string;
                        /** @example null */
                        origin: null | string;
                        /** @example null */
                        parentTransactionLegacyExternalId: null | string;
                        /** @enum {string} */
                        representing: "BUYER" | "SELLER";
                        salePrice: number;
                        /** @example null */
                        sellerNames: null | string;
                        sellingPercentage: number | null;
                        /** @example null */
                        settlementContactLegacyExternalId: null | string;
                        startingGrossCommission: number;
                        /** @enum {string} */
                        status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @example null */
                        teamLegacyExternalId: null | string;
                        /** @example null */
                        transactionReportingId: null | string;
                        /** @enum {string} */
                        type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        /** @example null */
                        upstreamUpdateErrorMessage: null | string;
                        /** @example null */
                        wireId: null | string;
                        isPersonalTransaction: boolean;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            acceptanceDate: null | string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                            adjustedGrossCommission: number | null;
                            /** @example null */
                            allDemandsSignedDate: null | string;
                            brokerageGrossCommission: number | null;
                            brokerageNetCommission: number | null;
                            /** @example null */
                            buyerNames: null | string;
                            /** @example null */
                            closeDate: null | string;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @example null */
                            commissionSystem: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                            /** @example null */
                            complianceCompletionDate: null | string;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            /** @example null */
                            complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                            /** @example null */
                            demandFormSubmittedOn: null | string;
                            /** @example null */
                            demandTransactionLegacyExternalId: null | string;
                            escrowAmount: number | null;
                            /** @example null */
                            escrowNumber: null | string;
                            /** @example null */
                            expirationDate: null | string;
                            hasAllInvoicesPaid: boolean;
                            hasCoBrokerageFees: boolean;
                            hasInstantPayEligibleTeamMember: boolean;
                            /** @example null */
                            instantPayParticipation: null | string;
                            /** @example null */
                            interactionId: null | string;
                            isCoList: boolean;
                            isConciergeLoan: boolean;
                            isOriginalInstallmentPayment: boolean;
                            isPaymentReceived: boolean;
                            isRepresentingBothSides: boolean;
                            /** Format: date-time */
                            lastModifiedDate: string;
                            /** @example null */
                            leadSourceDetail: null | string;
                            /** @example null */
                            leadSourceName: null | string;
                            legacyExternalId: string;
                            /** @example null */
                            listingDate: null | string;
                            listingPercentage: number | null;
                            listPrice: number | null;
                            /** @example null */
                            mlsNumber: null | string;
                            /** @example null */
                            mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                            /** @example null */
                            modifiedByUser: null | string;
                            /** @example null */
                            name: null | string;
                            /** @example null */
                            offMarketListingNotes: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            origin: null | string;
                            /** @example null */
                            parentTransactionLegacyExternalId: null | string;
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER";
                            salePrice: number;
                            /** @example null */
                            sellerNames: null | string;
                            sellingPercentage: number | null;
                            /** @example null */
                            settlementContactLegacyExternalId: null | string;
                            startingGrossCommission: number;
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            teamLegacyExternalId: null | string;
                            /** @example null */
                            transactionReportingId: null | string;
                            /** @enum {string} */
                            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            /** @example null */
                            upstreamUpdateErrorMessage: null | string;
                            /** @example null */
                            wireId: null | string;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/opportunities/{opportunityId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    opportunityId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        id?: null | string;
                        /** @example null */
                        acceptanceDate?: null | string;
                        address?: {
                            /** @example null */
                            street1: null | string;
                            /** @example null */
                            street2: null | string;
                            /** @example null */
                            city: null | string;
                            /** @example null */
                            state: null | string;
                            /** @example null */
                            zip: null | (string);
                            /** @example null */
                            county: null | string;
                            /** @example null */
                            country: null | string;
                        };
                        adjustedGrossCommission?: number | null;
                        /** @example null */
                        allDemandsSignedDate?: null | string;
                        brokerageGrossCommission?: number | null;
                        brokerageNetCommission?: number | null;
                        /** @example null */
                        buyerNames?: null | string;
                        /** @example null */
                        closeDate?: null | string;
                        /** @example null */
                        commissionLeadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                        /** @example null */
                        commissionSystem?: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                        /** @example null */
                        complianceCompletionDate?: null | string;
                        /** @example null */
                        complianceStage?: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                        /** @example null */
                        complianceStatus?: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                        /** @example null */
                        demandFormSubmittedOn?: null | string;
                        /** @example null */
                        demandTransactionLegacyExternalId?: null | string;
                        escrowAmount?: number | null;
                        /** @example null */
                        escrowNumber?: null | string;
                        /** @example null */
                        expirationDate?: null | string;
                        hasInstantPayEligibleTeamMember?: boolean;
                        /** @example null */
                        instantPayParticipation?: null | string;
                        /** @example null */
                        interactionId?: null | string;
                        isCoList?: boolean;
                        isConciergeLoan?: boolean;
                        isOriginalInstallmentPayment?: boolean;
                        isPaymentReceived?: boolean;
                        isRepresentingBothSides?: boolean;
                        /** Format: date-time */
                        lastModifiedDate?: string;
                        /** @example null */
                        leadSourceDetail?: null | string;
                        /** @example null */
                        leadSourceName?: null | string;
                        legacyExternalId?: string;
                        /** @example null */
                        listingDate?: null | string;
                        listingPercentage?: number | null;
                        listPrice?: number | null;
                        /** @example null */
                        mlsNumber?: null | string;
                        /** @example null */
                        mlsStatus?: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                        /** @example null */
                        modifiedByUser?: null | string;
                        /** @example null */
                        name?: null | string;
                        /** @example null */
                        offMarketListingNotes?: null | string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId?: null | string;
                        /** @example null */
                        origin?: null | string;
                        /** @example null */
                        parentTransactionLegacyExternalId?: null | string;
                        /** @enum {string} */
                        representing?: "BUYER" | "SELLER";
                        salePrice?: number;
                        /** @example null */
                        sellerNames?: null | string;
                        sellingPercentage?: number | null;
                        /** @example null */
                        settlementContactLegacyExternalId?: null | string;
                        startingGrossCommission?: number;
                        /** @enum {string} */
                        status?: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                        /** @example null */
                        teamLegacyExternalId?: null | string;
                        /** @example null */
                        transactionReportingId?: null | string;
                        /** @enum {string} */
                        type?: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                        /** @example null */
                        upstreamUpdateErrorMessage?: null | string;
                        /** @example null */
                        wireId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            acceptanceDate: null | string;
                            address: {
                                /** @example null */
                                street1: null | string;
                                /** @example null */
                                street2: null | string;
                                /** @example null */
                                city: null | string;
                                /** @example null */
                                state: null | string;
                                /** @example null */
                                zip: null | (string);
                                /** @example null */
                                county: null | string;
                                /** @example null */
                                country: null | string;
                            };
                            adjustedGrossCommission: number | null;
                            /** @example null */
                            allDemandsSignedDate: null | string;
                            brokerageGrossCommission: number | null;
                            brokerageNetCommission: number | null;
                            /** @example null */
                            buyerNames: null | string;
                            /** @example null */
                            closeDate: null | string;
                            /** @example null */
                            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                            /** @example null */
                            commissionSystem: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                            /** @example null */
                            complianceCompletionDate: null | string;
                            /** @example null */
                            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                            /** @example null */
                            complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                            /** @example null */
                            demandFormSubmittedOn: null | string;
                            /** @example null */
                            demandTransactionLegacyExternalId: null | string;
                            escrowAmount: number | null;
                            /** @example null */
                            escrowNumber: null | string;
                            /** @example null */
                            expirationDate: null | string;
                            hasAllInvoicesPaid: boolean;
                            hasCoBrokerageFees: boolean;
                            hasInstantPayEligibleTeamMember: boolean;
                            /** @example null */
                            instantPayParticipation: null | string;
                            /** @example null */
                            interactionId: null | string;
                            isCoList: boolean;
                            isConciergeLoan: boolean;
                            isOriginalInstallmentPayment: boolean;
                            isPaymentReceived: boolean;
                            isRepresentingBothSides: boolean;
                            /** Format: date-time */
                            lastModifiedDate: string;
                            /** @example null */
                            leadSourceDetail: null | string;
                            /** @example null */
                            leadSourceName: null | string;
                            legacyExternalId: string;
                            /** @example null */
                            listingDate: null | string;
                            listingPercentage: number | null;
                            listPrice: number | null;
                            /** @example null */
                            mlsNumber: null | string;
                            /** @example null */
                            mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                            /** @example null */
                            modifiedByUser: null | string;
                            /** @example null */
                            name: null | string;
                            /** @example null */
                            offMarketListingNotes: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            origin: null | string;
                            /** @example null */
                            parentTransactionLegacyExternalId: null | string;
                            /** @enum {string} */
                            representing: "BUYER" | "SELLER";
                            salePrice: number;
                            /** @example null */
                            sellerNames: null | string;
                            sellingPercentage: number | null;
                            /** @example null */
                            settlementContactLegacyExternalId: null | string;
                            startingGrossCommission: number;
                            /** @enum {string} */
                            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                            /** @example null */
                            teamLegacyExternalId: null | string;
                            /** @example null */
                            transactionReportingId: null | string;
                            /** @enum {string} */
                            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                            /** @example null */
                            upstreamUpdateErrorMessage: null | string;
                            /** @example null */
                            wireId: null | string;
                            isPersonalTransaction: boolean;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/admin/demand-transactions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    legacyExternalIds?: string[];
                    opportunityIds?: string[];
                    statuses?: ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED")[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                /** @example null */
                                id: null | string;
                                /** @example null */
                                caseLegacyExternalId: null | string;
                                /** @example null */
                                commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                                isSubmitted: boolean;
                                /** Format: date-time */
                                lastModifiedAt: string;
                                /** @example null */
                                lastModifiedBySalesforceUser: null | string;
                                latestStatementsSent: boolean;
                                legacyExternalId: string;
                                /** @example null */
                                onBehalfOfTeamMemberLegacyExternalId: null | string;
                                transactionLegacyExternalId: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        commissionStatus?: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                        isSubmitted?: boolean;
                        transactionLegacyExternalId?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            caseLegacyExternalId: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            isSubmitted: boolean;
                            /** Format: date-time */
                            lastModifiedAt: string;
                            /** @example null */
                            lastModifiedBySalesforceUser: null | string;
                            latestStatementsSent: boolean;
                            legacyExternalId: string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            transactionLegacyExternalId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/demand-transactions/{demandTransactionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    demandTransactionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            caseLegacyExternalId: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            isSubmitted: boolean;
                            /** Format: date-time */
                            lastModifiedAt: string;
                            /** @example null */
                            lastModifiedBySalesforceUser: null | string;
                            latestStatementsSent: boolean;
                            legacyExternalId: string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            transactionLegacyExternalId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    demandTransactionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        id?: null | string;
                        /** @example null */
                        caseLegacyExternalId?: null | string;
                        /** @example null */
                        commissionStatus?: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                        isSubmitted?: boolean;
                        /** Format: date-time */
                        lastModifiedAt?: string;
                        /** @example null */
                        lastModifiedBySalesforceUser?: null | string;
                        latestStatementsSent?: boolean;
                        legacyExternalId?: string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId?: null | string;
                        transactionLegacyExternalId?: string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            caseLegacyExternalId: null | string;
                            /** @example null */
                            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                            isSubmitted: boolean;
                            /** Format: date-time */
                            lastModifiedAt: string;
                            /** @example null */
                            lastModifiedBySalesforceUser: null | string;
                            latestStatementsSent: boolean;
                            legacyExternalId: string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            transactionLegacyExternalId: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/admin/agent-commissions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    legacyExternalIds?: string[];
                    opportunityLegacyExternalIds?: string[];
                    /** @description Will match on Opportunity__r.Parent_Transaction_Opportunity__c */
                    opportunityParentLegacyExternalIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                /** @example null */
                                id: null | string;
                                agentGross: number | null;
                                agentNet: number | null;
                                agentPercent: number | null;
                                agentTaxAmount: number | null;
                                agentSplit: number | null;
                                amountOwedToSide: number | null;
                                brokerageGross: number | null;
                                brokeragePercent: number | null;
                                userLegacyExternalId: string;
                                expectedBrokeragePercent: number | null;
                                fixedFeesApplied: boolean;
                                isPersonalTransaction: boolean;
                                isRepresentingBothParties: boolean;
                                legacyExternalId: string;
                                /** @example null */
                                modifiedBySalesforceUser: null | string;
                                /** @example null */
                                onBehalfOfTeamMemberLegacyExternalId: null | string;
                                opportunityLegacyExternalId: string;
                                parentTeamGross: number | null;
                                parentTeamPercent: number | null;
                                parentTeamTaxAmount: number | null;
                                percentageToAnnualCap: number | null;
                                postCapSavingsAmount: number | null;
                                /** @example null */
                                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                                /** @example null */
                                rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                                teamContactLegacyExternalId: string;
                                teamGross: number | null;
                                teamPercent: number | null;
                                teamTaxAmount: number | null;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": {
                        agentGross: number | null;
                        agentNet: number | null;
                        agentPercent: number | null;
                        agentTaxAmount: number | null;
                        agentSplit: number | null;
                        amountOwedToSide: number | null;
                        brokerageGross: number | null;
                        brokeragePercent: number | null;
                        userLegacyExternalId: string;
                        expectedBrokeragePercent: number | null;
                        fixedFeesApplied: boolean;
                        isPersonalTransaction: boolean;
                        isRepresentingBothParties: boolean;
                        /** @example null */
                        modifiedBySalesforceUser: null | string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId: null | string;
                        opportunityLegacyExternalId: string;
                        parentTeamGross: number | null;
                        parentTeamPercent: number | null;
                        parentTeamTaxAmount: number | null;
                        postCapSavingsAmount: number | null;
                        /** @example null */
                        postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                        /** @example null */
                        rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                        teamContactLegacyExternalId: string;
                        teamGross: number | null;
                        teamPercent: number | null;
                        teamTaxAmount: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            agentGross: number | null;
                            agentNet: number | null;
                            agentPercent: number | null;
                            agentTaxAmount: number | null;
                            agentSplit: number | null;
                            amountOwedToSide: number | null;
                            brokerageGross: number | null;
                            brokeragePercent: number | null;
                            userLegacyExternalId: string;
                            expectedBrokeragePercent: number | null;
                            fixedFeesApplied: boolean;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            legacyExternalId: string;
                            /** @example null */
                            modifiedBySalesforceUser: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            opportunityLegacyExternalId: string;
                            parentTeamGross: number | null;
                            parentTeamPercent: number | null;
                            parentTeamTaxAmount: number | null;
                            percentageToAnnualCap: number | null;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            teamContactLegacyExternalId: string;
                            teamGross: number | null;
                            teamPercent: number | null;
                            teamTaxAmount: number | null;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/agent-commissions/{agentCommissionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    agentCommissionId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @example null */
                        id?: null | string;
                        agentGross?: number | null;
                        agentNet?: number | null;
                        agentPercent?: number | null;
                        agentTaxAmount?: number | null;
                        agentSplit?: number | null;
                        amountOwedToSide?: number | null;
                        brokerageGross?: number | null;
                        brokeragePercent?: number | null;
                        userLegacyExternalId?: string;
                        expectedBrokeragePercent?: number | null;
                        fixedFeesApplied?: boolean;
                        isPersonalTransaction?: boolean;
                        isRepresentingBothParties?: boolean;
                        legacyExternalId?: string;
                        /** @example null */
                        modifiedBySalesforceUser?: null | string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId?: null | string;
                        opportunityLegacyExternalId?: string;
                        parentTeamGross?: number | null;
                        parentTeamPercent?: number | null;
                        parentTeamTaxAmount?: number | null;
                        postCapSavingsAmount?: number | null;
                        /** @example null */
                        postCapSavingsRecipient?: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                        /** @example null */
                        rebateType?: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                        teamContactLegacyExternalId?: string;
                        teamGross?: number | null;
                        teamPercent?: number | null;
                        teamTaxAmount?: number | null;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            agentGross: number | null;
                            agentNet: number | null;
                            agentPercent: number | null;
                            agentTaxAmount: number | null;
                            agentSplit: number | null;
                            amountOwedToSide: number | null;
                            brokerageGross: number | null;
                            brokeragePercent: number | null;
                            userLegacyExternalId: string;
                            expectedBrokeragePercent: number | null;
                            fixedFeesApplied: boolean;
                            isPersonalTransaction: boolean;
                            isRepresentingBothParties: boolean;
                            legacyExternalId: string;
                            /** @example null */
                            modifiedBySalesforceUser: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            opportunityLegacyExternalId: string;
                            parentTeamGross: number | null;
                            parentTeamPercent: number | null;
                            parentTeamTaxAmount: number | null;
                            percentageToAnnualCap: number | null;
                            postCapSavingsAmount: number | null;
                            /** @example null */
                            postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                            /** @example null */
                            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                            teamContactLegacyExternalId: string;
                            teamGross: number | null;
                            teamPercent: number | null;
                            teamTaxAmount: number | null;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/admin/demand-transaction-details/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    offset?: number;
                    limit?: number;
                    legacyExternalIds?: string[];
                    demandTransactionIds?: string[];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            totalCount: number;
                            results: {
                                /** @example null */
                                id: null | string;
                                /** @example null */
                                additionalWireId: null | string;
                                /** @example null */
                                address: null | {
                                    street1: null | string;
                                    street2: null | string;
                                    city: null | string;
                                    state: null | string;
                                    zip: null | (string);
                                    county: null | string;
                                    country: null | string;
                                };
                                /** @example null */
                                agentName: null | string;
                                amount: number | null;
                                /** @example null */
                                collectionId: null | string;
                                /** @example null */
                                dataType: null | (0 | 1);
                                demandTransactionLegacyExternalId?: string;
                                /** @example null */
                                description: null | string;
                                /** @example null */
                                externalPayeeName: null | string;
                                /** @example null */
                                feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                                hasInternalReferralTransaction: boolean;
                                /** @example null */
                                isPreSplit: null | boolean;
                                /** @example null */
                                leaseAgentBrokerage: null | string;
                                legacyExternalId: string;
                                /** @example null */
                                memo: null | string;
                                /** @example null */
                                modifiedBySalesforceUser: null | string;
                                /** @example null */
                                onBehalfOfTeamMemberLegacyExternalId: null | string;
                                /** @example null */
                                paidByTeamLegacyExternalId: null | string;
                                /** @example null */
                                paidByTeamMemberLegacyExternalId: null | string;
                                /** @example null */
                                paidToTeamLegacyExternalId: null | string;
                                /** @example null */
                                paidToteamMemberLegacyExternalId: null | string;
                                percentage: number | null;
                                /** @example null */
                                referralType: null | string;
                                /** @example null */
                                reportingFeeType: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                                /** @example null */
                                teamMemberLegacyExternalId: null | string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/demand-transaction-details/{demandTransactionDetailsId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    demandTransactionDetailsId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            additionalWireId: null | string;
                            /** @example null */
                            address: null | {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            /** @example null */
                            agentName: null | string;
                            amount: number | null;
                            /** @example null */
                            collectionId: null | string;
                            /** @example null */
                            dataType: null | (0 | 1);
                            demandTransactionLegacyExternalId?: string;
                            /** @example null */
                            description: null | string;
                            /** @example null */
                            externalPayeeName: null | string;
                            /** @example null */
                            feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                            hasInternalReferralTransaction: boolean;
                            /** @example null */
                            isPreSplit: null | boolean;
                            /** @example null */
                            leaseAgentBrokerage: null | string;
                            legacyExternalId: string;
                            /** @example null */
                            memo: null | string;
                            /** @example null */
                            modifiedBySalesforceUser: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            paidByTeamLegacyExternalId: null | string;
                            /** @example null */
                            paidByTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            paidToTeamLegacyExternalId: null | string;
                            /** @example null */
                            paidToteamMemberLegacyExternalId: null | string;
                            percentage: number | null;
                            /** @example null */
                            referralType: null | string;
                            /** @example null */
                            reportingFeeType: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                            /** @example null */
                            teamMemberLegacyExternalId: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    demandTransactionDetailsId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        isPreSplit?: boolean;
                        /** @example null */
                        id?: null | string;
                        /** @example null */
                        additionalWireId?: null | string;
                        /** @example null */
                        address?: null | {
                            street1: null | string;
                            street2: null | string;
                            city: null | string;
                            state: null | string;
                            zip: null | (string);
                            county: null | string;
                            country: null | string;
                        };
                        /** @example null */
                        agentName?: null | string;
                        amount?: number | null;
                        /** @example null */
                        collectionId?: null | string;
                        /** @example null */
                        dataType?: null | (0 | 1);
                        demandTransactionLegacyExternalId?: string;
                        /** @example null */
                        description?: null | string;
                        /** @example null */
                        externalPayeeName?: null | string;
                        /** @example null */
                        feeType?: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                        hasInternalReferralTransaction?: boolean;
                        /** @example null */
                        leaseAgentBrokerage?: null | string;
                        legacyExternalId?: string;
                        /** @example null */
                        memo?: null | string;
                        /** @example null */
                        modifiedBySalesforceUser?: null | string;
                        /** @example null */
                        onBehalfOfTeamMemberLegacyExternalId?: null | string;
                        /** @example null */
                        paidByTeamLegacyExternalId?: null | string;
                        /** @example null */
                        paidByTeamMemberLegacyExternalId?: null | string;
                        /** @example null */
                        paidToTeamLegacyExternalId?: null | string;
                        /** @example null */
                        paidToteamMemberLegacyExternalId?: null | string;
                        percentage?: number | null;
                        /** @example null */
                        referralType?: null | string;
                        /** @example null */
                        reportingFeeType?: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                        /** @example null */
                        teamMemberLegacyExternalId?: null | string;
                    };
                };
            };
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example null */
                            id: null | string;
                            /** @example null */
                            additionalWireId: null | string;
                            /** @example null */
                            address: null | {
                                street1: null | string;
                                street2: null | string;
                                city: null | string;
                                state: null | string;
                                zip: null | (string);
                                county: null | string;
                                country: null | string;
                            };
                            /** @example null */
                            agentName: null | string;
                            amount: number | null;
                            /** @example null */
                            collectionId: null | string;
                            /** @example null */
                            dataType: null | (0 | 1);
                            demandTransactionLegacyExternalId?: string;
                            /** @example null */
                            description: null | string;
                            /** @example null */
                            externalPayeeName: null | string;
                            /** @example null */
                            feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                            hasInternalReferralTransaction: boolean;
                            /** @example null */
                            isPreSplit: null | boolean;
                            /** @example null */
                            leaseAgentBrokerage: null | string;
                            legacyExternalId: string;
                            /** @example null */
                            memo: null | string;
                            /** @example null */
                            modifiedBySalesforceUser: null | string;
                            /** @example null */
                            onBehalfOfTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            paidByTeamLegacyExternalId: null | string;
                            /** @example null */
                            paidByTeamMemberLegacyExternalId: null | string;
                            /** @example null */
                            paidToTeamLegacyExternalId: null | string;
                            /** @example null */
                            paidToteamMemberLegacyExternalId: null | string;
                            percentage: number | null;
                            /** @example null */
                            referralType: null | string;
                            /** @example null */
                            reportingFeeType: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                            /** @example null */
                            teamMemberLegacyExternalId: null | string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message?: string;
                            statusCode?: number;
                            error: string;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/admin/accrual-and-cap/team-members/{teamMemberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamMemberId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            teamMemberLegacyExternalId: string;
                            grossCommissionIncomeTierAmount: number | null;
                            homeSaleVolumeTierAmount: number | null;
                            transactionCountTierAmount: number | null;
                            /** @example null */
                            agentCapType: null | (0 | 1 | 2 | 3 | 4 | 5 | 6);
                            agentCapAmount: number | null;
                            progressToAnnualCap: number | null;
                            /** @example null */
                            agentCapStartDate: null | string;
                            personalTransactionsUsed: number | null;
                            /** @example null */
                            sharedCap: null | {
                                id: string;
                                progressToAnnualCap: number | null;
                                planCapAmount: number | null;
                            };
                            /** @example null */
                            legacyTeamExternalId: null | string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/accrual-and-cap/teams/{teamId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    teamId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Default Response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            teamLegacyExternalId: string;
                            /** @example null */
                            tierPlanLegacyExternalId: null | string;
                            chargesForLeases: boolean;
                            grossCommissionIncomeAccumulationAmount: number | null;
                            /** @example null */
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            /** @example null */
                            capType: null | (0 | 1 | 2 | 3 | 4 | 5 | 6);
                            /** @example null */
                            deferredCommissionStartDate: null | string;
                            /** @example null */
                            discountOption: null | string;
                            flatFeePerTransaction: number | null;
                            calculatorVersion: number | null;
                            progressToAnnualCap: number | null;
                            brandCapAmount: number | null;
                            /** @example null */
                            rermPolicy: null | {
                                id: string;
                                amount: number;
                                status: "Draft" | "Activated" | "Canceled";
                                paidByType: null | ("Agents" | "Team");
                                feeType: {
                                    id: string;
                                    processInSideCalculator: boolean;
                                };
                            };
                            /** @example null */
                            parentTeamLegacyExternalId: null | string;
                        };
                    };
                };
                /** @description Default Response */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            message: string;
                            code: string;
                            statusCode: number;
                            error: string;
                        };
                    };
                };
                /** @description Default Response */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Error"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AdminAdjustmentPostBody: {
            isPreview: boolean;
            opportunity?: {
                /** @example null */
                id?: null | string;
                /** @example null */
                acceptanceDate?: null | string;
                address?: {
                    /** @example null */
                    street1: null | string;
                    /** @example null */
                    street2: null | string;
                    /** @example null */
                    city: null | string;
                    /** @example null */
                    state: null | string;
                    /** @example null */
                    zip: null | (string);
                    /** @example null */
                    county: null | string;
                    /** @example null */
                    country: null | string;
                };
                adjustedGrossCommission?: number | null;
                /** @example null */
                allDemandsSignedDate?: null | string;
                brokerageGrossCommission?: number | null;
                brokerageNetCommission?: number | null;
                /** @example null */
                buyerNames?: null | string;
                /** @example null */
                closeDate?: null | string;
                /** @example null */
                commissionLeadSource?: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                /** @example null */
                commissionSystem?: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                /** @example null */
                complianceCompletionDate?: null | string;
                /** @example null */
                complianceStage?: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                /** @example null */
                complianceStatus?: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                /** @example null */
                demandFormSubmittedOn?: null | string;
                /** @example null */
                demandTransactionLegacyExternalId?: null | string;
                escrowAmount?: number | null;
                /** @example null */
                escrowNumber?: null | string;
                /** @example null */
                expirationDate?: null | string;
                hasInstantPayEligibleTeamMember?: boolean;
                /** @example null */
                instantPayParticipation?: null | string;
                /** @example null */
                interactionId?: null | string;
                isCoList?: boolean;
                isConciergeLoan?: boolean;
                isOriginalInstallmentPayment?: boolean;
                isPaymentReceived?: boolean;
                isRepresentingBothSides?: boolean;
                /** Format: date-time */
                lastModifiedDate?: string;
                /** @example null */
                leadSourceDetail?: null | string;
                /** @example null */
                leadSourceName?: null | string;
                legacyExternalId?: string;
                /** @example null */
                listingDate?: null | string;
                listingPercentage?: number | null;
                listPrice?: number | null;
                /** @example null */
                mlsNumber?: null | string;
                /** @example null */
                mlsStatus?: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                /** @example null */
                modifiedByUser?: null | string;
                /** @example null */
                name?: null | string;
                /** @example null */
                offMarketListingNotes?: null | string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId?: null | string;
                /** @example null */
                origin?: null | string;
                /** @example null */
                parentTransactionLegacyExternalId?: null | string;
                /** @enum {string} */
                representing?: "BUYER" | "SELLER";
                salePrice?: number;
                /** @example null */
                sellerNames?: null | string;
                sellingPercentage?: number | null;
                /** @example null */
                settlementContactLegacyExternalId?: null | string;
                startingGrossCommission?: number;
                /** @enum {string} */
                status?: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                /** @example null */
                teamLegacyExternalId?: null | string;
                /** @example null */
                transactionReportingId?: null | string;
                /** @enum {string} */
                type?: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                /** @example null */
                upstreamUpdateErrorMessage?: null | string;
                /** @example null */
                wireId?: null | string;
            };
            demandTransaction?: {
                /** @example null */
                id?: null | string;
                /** @example null */
                caseLegacyExternalId?: null | string;
                /** @example null */
                commissionStatus?: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                isSubmitted?: boolean;
                /** Format: date-time */
                lastModifiedAt?: string;
                /** @example null */
                lastModifiedBySalesforceUser?: null | string;
                latestStatementsSent?: boolean;
                legacyExternalId?: string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId?: null | string;
                transactionLegacyExternalId?: string;
            };
            agentCommissions?: ({
                agentGross: number | null;
                agentNet: number | null;
                agentPercent: number | null;
                agentTaxAmount: number | null;
                agentSplit: number | null;
                amountOwedToSide: number | null;
                brokerageGross: number | null;
                brokeragePercent: number | null;
                userLegacyExternalId: string;
                expectedBrokeragePercent: number | null;
                fixedFeesApplied: boolean;
                isPersonalTransaction: boolean;
                isRepresentingBothParties: boolean;
                modifiedBySalesforceUser: null | string;
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                opportunityLegacyExternalId: string;
                parentTeamGross: number | null;
                parentTeamPercent: number | null;
                parentTeamTaxAmount: number | null;
                postCapSavingsAmount: number | null;
                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                teamContactLegacyExternalId: string;
                teamGross: number | null;
                teamPercent: number | null;
                teamTaxAmount: number | null;
                /** @enum {boolean} */
                $isNew: true;
                /** @enum {boolean} */
                $isDeleted: false;
            } | {
                id?: null | string;
                agentGross?: number | null;
                agentNet?: number | null;
                agentPercent?: number | null;
                agentTaxAmount?: number | null;
                agentSplit?: number | null;
                amountOwedToSide?: number | null;
                brokerageGross?: number | null;
                brokeragePercent?: number | null;
                userLegacyExternalId?: string;
                expectedBrokeragePercent?: number | null;
                fixedFeesApplied?: boolean;
                isPersonalTransaction?: boolean;
                isRepresentingBothParties?: boolean;
                legacyExternalId?: string;
                modifiedBySalesforceUser?: null | string;
                onBehalfOfTeamMemberLegacyExternalId?: null | string;
                opportunityLegacyExternalId?: string;
                parentTeamGross?: number | null;
                parentTeamPercent?: number | null;
                parentTeamTaxAmount?: number | null;
                postCapSavingsAmount?: number | null;
                postCapSavingsRecipient?: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                rebateType?: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                teamContactLegacyExternalId?: string;
                teamGross?: number | null;
                teamPercent?: number | null;
                teamTaxAmount?: number | null;
                /** @enum {boolean} */
                $isNew: false;
                $isDeleted: boolean;
            })[];
            demandTransactionDetails?: ({
                isPreSplit: boolean;
                additionalWireId: null | string;
                address: null | {
                    street1: null | string;
                    street2: null | string;
                    city: null | string;
                    state: null | string;
                    zip: null | (string);
                    county: null | string;
                    country: null | string;
                };
                agentName: null | string;
                amount: number | null;
                collectionId: null | string;
                dataType: null | (0 | 1);
                demandTransactionLegacyExternalId?: string;
                description: null | string;
                externalPayeeName: null | string;
                feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                hasInternalReferralTransaction: boolean;
                leaseAgentBrokerage: null | string;
                memo: null | string;
                modifiedBySalesforceUser: null | string;
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                paidByTeamLegacyExternalId: null | string;
                paidByTeamMemberLegacyExternalId: null | string;
                paidToTeamLegacyExternalId: null | string;
                paidToteamMemberLegacyExternalId: null | string;
                percentage: number | null;
                referralType: null | string;
                reportingFeeType: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                teamMemberLegacyExternalId: null | string;
                /** @enum {boolean} */
                $isNew: true;
                /** @enum {boolean} */
                $isDeleted: false;
            } | {
                isPreSplit?: boolean;
                id?: null | string;
                additionalWireId?: null | string;
                address?: null | {
                    street1: null | string;
                    street2: null | string;
                    city: null | string;
                    state: null | string;
                    zip: null | (string);
                    county: null | string;
                    country: null | string;
                };
                agentName?: null | string;
                amount?: number | null;
                collectionId?: null | string;
                dataType?: null | (0 | 1);
                demandTransactionLegacyExternalId?: string;
                description?: null | string;
                externalPayeeName?: null | string;
                feeType?: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                hasInternalReferralTransaction?: boolean;
                leaseAgentBrokerage?: null | string;
                legacyExternalId?: string;
                memo?: null | string;
                modifiedBySalesforceUser?: null | string;
                onBehalfOfTeamMemberLegacyExternalId?: null | string;
                paidByTeamLegacyExternalId?: null | string;
                paidByTeamMemberLegacyExternalId?: null | string;
                paidToTeamLegacyExternalId?: null | string;
                paidToteamMemberLegacyExternalId?: null | string;
                percentage?: number | null;
                referralType?: null | string;
                reportingFeeType?: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                teamMemberLegacyExternalId?: null | string;
                /** @enum {boolean} */
                $isNew: false;
                $isDeleted: boolean;
            })[];
        };
        AdminAdjustment: {
            opportunity: {
                /** @example null */
                id: null | string;
                /** @example null */
                acceptanceDate: null | string;
                address: {
                    /** @example null */
                    street1: null | string;
                    /** @example null */
                    street2: null | string;
                    /** @example null */
                    city: null | string;
                    /** @example null */
                    state: null | string;
                    /** @example null */
                    zip: null | (string);
                    /** @example null */
                    county: null | string;
                    /** @example null */
                    country: null | string;
                };
                adjustedGrossCommission: number | null;
                /** @example null */
                allDemandsSignedDate: null | string;
                brokerageGrossCommission: number | null;
                brokerageNetCommission: number | null;
                /** @example null */
                buyerNames: null | string;
                /** @example null */
                closeDate: null | string;
                /** @example null */
                commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
                /** @example null */
                commissionSystem: null | ("SIDE" | "BROKERMINT" | "UNKNOWN");
                /** @example null */
                complianceCompletionDate: null | string;
                /** @example null */
                complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
                /** @example null */
                complianceStatus: null | ("ACTIVE_LISTING" | "ARCHIVED" | "CANCELLATION_REQUESTED" | "CANCELLED" | "CLOSED" | "CREATED" | "PENDING" | "REACTIVATION_REQUESTED" | "TRANSFER");
                /** @example null */
                demandFormSubmittedOn: null | string;
                /** @example null */
                demandTransactionLegacyExternalId: null | string;
                escrowAmount: number | null;
                /** @example null */
                escrowNumber: null | string;
                /** @example null */
                expirationDate: null | string;
                hasAllInvoicesPaid: boolean;
                hasCoBrokerageFees: boolean;
                hasInstantPayEligibleTeamMember: boolean;
                /** @example null */
                instantPayParticipation: null | string;
                /** @example null */
                interactionId: null | string;
                isCoList: boolean;
                isConciergeLoan: boolean;
                isOriginalInstallmentPayment: boolean;
                isPaymentReceived: boolean;
                isRepresentingBothSides: boolean;
                /** Format: date-time */
                lastModifiedDate: string;
                /** @example null */
                leadSourceDetail: null | string;
                /** @example null */
                leadSourceName: null | string;
                legacyExternalId: string;
                /** @example null */
                listingDate: null | string;
                listingPercentage: number | null;
                listPrice: number | null;
                /** @example null */
                mlsNumber: null | string;
                /** @example null */
                mlsStatus: null | ("OFF_MARKET" | "COMING_SOON" | "ON_MARKET" | "OPTED_OUT");
                /** @example null */
                modifiedByUser: null | string;
                /** @example null */
                name: null | string;
                /** @example null */
                offMarketListingNotes: null | string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                /** @example null */
                origin: null | string;
                /** @example null */
                parentTransactionLegacyExternalId: null | string;
                /** @enum {string} */
                representing: "BUYER" | "SELLER";
                salePrice: number;
                /** @example null */
                sellerNames: null | string;
                sellingPercentage: number | null;
                /** @example null */
                settlementContactLegacyExternalId: null | string;
                startingGrossCommission: number;
                /** @enum {string} */
                status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
                /** @example null */
                teamLegacyExternalId: null | string;
                /** @example null */
                transactionReportingId: null | string;
                /** @enum {string} */
                type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
                /** @example null */
                upstreamUpdateErrorMessage: null | string;
                /** @example null */
                wireId: null | string;
                isPersonalTransaction: boolean;
            };
            demandTransaction: {
                /** @example null */
                id: null | string;
                /** @example null */
                caseLegacyExternalId: null | string;
                /** @example null */
                commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
                isSubmitted: boolean;
                /** Format: date-time */
                lastModifiedAt: string;
                /** @example null */
                lastModifiedBySalesforceUser: null | string;
                latestStatementsSent: boolean;
                legacyExternalId: string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                transactionLegacyExternalId: string;
            };
            agentCommissions: {
                /** @example null */
                id: null | string;
                agentGross: number | null;
                agentNet: number | null;
                agentPercent: number | null;
                agentTaxAmount: number | null;
                agentSplit: number | null;
                amountOwedToSide: number | null;
                brokerageGross: number | null;
                brokeragePercent: number | null;
                userLegacyExternalId: string;
                expectedBrokeragePercent: number | null;
                fixedFeesApplied: boolean;
                isPersonalTransaction: boolean;
                isRepresentingBothParties: boolean;
                legacyExternalId: string;
                /** @example null */
                modifiedBySalesforceUser: null | string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                opportunityLegacyExternalId: string;
                parentTeamGross: number | null;
                parentTeamPercent: number | null;
                parentTeamTaxAmount: number | null;
                percentageToAnnualCap: number | null;
                postCapSavingsAmount: number | null;
                /** @example null */
                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
                /** @example null */
                rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
                teamContactLegacyExternalId: string;
                teamGross: number | null;
                teamPercent: number | null;
                teamTaxAmount: number | null;
            }[];
            demandTransactionDetails: {
                /** @example null */
                id: null | string;
                /** @example null */
                additionalWireId: null | string;
                /** @example null */
                address: null | {
                    street1: null | string;
                    street2: null | string;
                    city: null | string;
                    state: null | string;
                    zip: null | (string);
                    county: null | string;
                    country: null | string;
                };
                /** @example null */
                agentName: null | string;
                amount: number | null;
                /** @example null */
                collectionId: null | string;
                /** @example null */
                dataType: null | (0 | 1);
                demandTransactionLegacyExternalId?: string;
                /** @example null */
                description: null | string;
                /** @example null */
                externalPayeeName: null | string;
                /** @example null */
                feeType: null | ("ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE");
                hasInternalReferralTransaction: boolean;
                /** @example null */
                isPreSplit: null | boolean;
                /** @example null */
                leaseAgentBrokerage: null | string;
                legacyExternalId: string;
                /** @example null */
                memo: null | string;
                /** @example null */
                modifiedBySalesforceUser: null | string;
                /** @example null */
                onBehalfOfTeamMemberLegacyExternalId: null | string;
                /** @example null */
                paidByTeamLegacyExternalId: null | string;
                /** @example null */
                paidByTeamMemberLegacyExternalId: null | string;
                /** @example null */
                paidToTeamLegacyExternalId: null | string;
                /** @example null */
                paidToteamMemberLegacyExternalId: null | string;
                percentage: number | null;
                /** @example null */
                referralType: null | string;
                /** @example null */
                reportingFeeType: null | ("AGENT_CREDIT" | "TEAM_CREDIT" | "BROKERAGE_CREDIT" | "TEAM_COMMISSION" | "INTERNAL_REFERRAL" | "OUTGOING_REFERRAL");
                /** @example null */
                teamMemberLegacyExternalId: null | string;
            }[];
        };
        AdminAllocationSplits: {
            /** @enum {string} */
            splitType: "AGENT" | "TEAM" | "BRAND" | "SIDE";
            amount: number | null;
            percentage: number | null;
            expectedAmount: number | null;
            expectedPercentage: number | null;
            taxAmount: number | null;
            netAmount: number | null;
            rebateAmount: number | null;
            /** @example null */
            rebateType: null | ("AGENT_REBATE" | "POST_CAP_SAVINGS");
        };
        AdminAllocation: {
            /** @example null */
            id: null | string;
            legacyExternalId: string;
            teamContactLegacyExternalId: string;
            isPersonalTransaction: boolean;
            allocationPercentage: number | null;
            areFixedFeesApplied: boolean;
            isRepresentingBothParties: boolean;
            splits: components["schemas"]["AdminAllocationSplits"][];
        };
        LegacyAllocation: {
            /** @example null */
            id: null | string;
            externalId: string;
            profile: {
                /** @example null */
                id: null | string;
                externalId: string;
                name: string;
                teamExternalId: string;
                /** @enum {string} */
                role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                /** @enum {string} */
                status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                /** @example null */
                licenseTerminationDate: null | string;
                hasMetPersonalTransactionLimit?: boolean;
            };
            amount: number;
            isPercent: boolean;
            isPersonalTransaction: boolean;
            isRepresentingBothParties: boolean;
            splits?: {
                agentPercent: number;
                teamPercent: number;
                brokeragePercent: number;
                parentTeamPercent: number;
                amountOwedToSide: number | null;
                expectedBrokeragePercent: number | null;
            };
            isCapReached?: boolean;
            hasMetPersonalTransactionLimit: boolean;
            gross: {
                agent: number | null;
                team: number | null;
                parentTeam: number | null;
                brokerage: number | null;
            };
            tax: {
                agentAmount: number | null;
                teamAmount: number | null;
                parentTeamAmount: number | null;
            };
            agentNet: number | null;
            postCapSavingsAmount: number | null;
            /** @example null */
            postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
        };
        Error: {
            message: string;
            error: string;
            statusCode: number;
        };
        CoListCreate: {
            teamMemberId: string;
            amount: number;
        };
        CoListParent: {
            amount: number;
        };
        CoListUpdate: {
            id: string;
            amount: number;
        };
        CommissionTier: {
            /** @example null */
            legacyExternalId: null | string;
            tierLevel: number;
            minAmount: number;
            tierSplits: components["schemas"]["CommissionTierSplit"][];
            /** @example null */
            noCapTierType: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
            /** @example null */
            strategyId: null | string;
            /** @example null */
            partyId: null | string;
            id: string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        CommissionTierSplit: {
            id: string;
            /** @example null */
            legacyExternalId: null | string;
            percentage: number;
            /** @example null */
            paidToId: null | string;
            /** @example null */
            templatePaidToPartyType?: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        CommissionFilterItem: {
            /** @enum {string} */
            property: "needsAttention";
            /** @enum {string} */
            operator: "NEQ";
            value: null;
        } | {
            /** @enum {string} */
            property: "needsAttention";
            /** @enum {string} */
            operator: "EQ";
            value: null;
        } | {
            /** @enum {string} */
            property: "address";
            /** @enum {string} */
            operator: "TK";
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "EQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "NEQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "LT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "LTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "GT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "closeDate";
            /** @enum {string} */
            operator: "GTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "NEQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "LT";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "LTE";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "GT";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "complianceCompletionDate";
            /** @enum {string} */
            operator: "GTE";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "hasInstantPayEligibleTeamMember";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "hasInstantPayEligibleTeamMember";
            /** @enum {string} */
            operator: "NEQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "teamId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "teamId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "teamId";
            /** @enum {string} */
            operator: "NIN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "teamIsInstantPayEligible";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "teamIsInstantPayEligible";
            /** @enum {string} */
            operator: "NEQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "teamMemberId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "teamMemberId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "teamMemberLegacyExternalId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "teamMemberLegacyExternalId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "EQ";
            value: number;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "NEQ";
            value: number;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "LT";
            value: number;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "LTE";
            value: number;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "GT";
            value: number;
        } | {
            /** @enum {string} */
            property: "escrowAmount";
            /** @enum {string} */
            operator: "GTE";
            value: number;
        } | {
            /** @enum {string} */
            property: "latestStatementsSent";
            /** @enum {string} */
            operator: "NEQ";
            value: null;
        } | {
            /** @enum {string} */
            property: "latestStatementsSent";
            /** @enum {string} */
            operator: "EQ";
            value: null;
        } | {
            /** @enum {string} */
            property: "propertyType";
            /** @enum {string} */
            operator: "IN";
            value: ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES")[];
        } | {
            /** @enum {string} */
            property: "propertyType";
            /** @enum {string} */
            operator: "NIN";
            value: ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES")[];
        } | {
            /** @enum {string} */
            property: "status";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {string} */
            value: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
        } | {
            /** @enum {string} */
            property: "status";
            /** @enum {string} */
            operator: "IN";
            value: ("CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE")[];
        } | {
            /** @enum {string} */
            property: "status";
            /** @enum {string} */
            operator: "NIN";
            value: ("CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE")[];
        } | {
            /** @enum {string} */
            property: "commissionStatus";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {string} */
            value: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
        } | {
            /** @enum {string} */
            property: "commissionStatus";
            /** @enum {string} */
            operator: "IN";
            value: ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED")[];
        } | {
            /** @enum {string} */
            property: "commissionStatus";
            /** @enum {string} */
            operator: "NIN";
            value: ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED")[];
        } | {
            /** @enum {string} */
            property: "personalTransaction";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {boolean} */
            value: true;
        } | {
            /** @enum {string} */
            property: "finalizationMethod";
            /** @enum {string} */
            operator: "IN";
            value: ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID")[];
        } | {
            /** @enum {string} */
            property: "finalizationMethod";
            /** @enum {string} */
            operator: "NIN";
            value: ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID")[];
        } | {
            /** @enum {string} */
            property: "state";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "state";
            /** @enum {string} */
            operator: "NIN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "id";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "id";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "legacyDemandTransactionExternalId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "legacyDemandTransactionExternalId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "legacyExternalId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "legacyExternalId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "parentCommissionId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "parentCommissionId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "assignee";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "assignee";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "assignee";
            /** @enum {string} */
            operator: "NIN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "EQ";
            value: number;
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "NEQ";
            value: number;
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "LT";
            value: number;
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "LTE";
            value: number;
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "GT";
            value: number;
        } | {
            /** @enum {string} */
            property: "startingGrossCommission";
            /** @enum {string} */
            operator: "GTE";
            value: number;
        } | {
            /** @enum {string} */
            property: "clientNames";
            /** @enum {string} */
            operator: "L";
            value: string;
        } | {
            /** @enum {string} */
            property: "counterPartyClientNames";
            /** @enum {string} */
            operator: "L";
            value: string;
        } | {
            /** @enum {string} */
            property: "settlementContactId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "settlementContactId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementContactId";
            /** @enum {string} */
            operator: "NIN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementCompanyId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "settlementCompanyId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementCompanyId";
            /** @enum {string} */
            operator: "NIN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementCompanyCustomerId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "settlementCompanyCustomerId";
            /** @enum {string} */
            operator: "NEQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "settlementCompanyCustomerId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementCompanyCustomerId";
            /** @enum {string} */
            operator: "NIN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "interactionId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "interactionId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "parentLegacyExternalId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        } | {
            /** @enum {string} */
            property: "parentLegacyExternalId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "commissionSystem";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {string} */
            value: "SIDE" | "BROKERMINT" | "UNKNOWN";
        } | {
            /** @enum {string} */
            property: "commissionSystem";
            /** @enum {string} */
            operator: "IN";
            value: ("SIDE" | "BROKERMINT" | "UNKNOWN")[];
        } | {
            /** @enum {string} */
            property: "hasBeenSubmitted";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "hasCoBrokerageFees";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "commissionVersionId";
            /** @enum {string} */
            operator: "EQ";
            value: string;
        } | {
            /** @enum {string} */
            property: "commissionVersionId";
            /** @enum {string} */
            operator: "IN";
            value: string[];
        } | {
            /** @enum {string} */
            property: "instantPayParticipation";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {string} */
            value: "ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID";
        } | {
            /** @enum {string} */
            property: "instantPayParticipation";
            /** @enum {string} */
            operator: "IN";
            value: ("ELIGIBLE" | "CLOSING_CERTIFIED" | "PENDING_APPROVAL" | "NOT_INSTANT_PAID")[];
        } | {
            /** @enum {string} */
            property: "isChildCoList";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isOriginalCoList";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isChildInstallment";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isOriginalInstallment";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "settlementContactLegacyExternalId";
            /** @enum {string} */
            operator: "IN";
            value: (null | string)[];
        } | {
            /** @enum {string} */
            property: "settlementContactLegacyExternalId";
            /** @enum {string} */
            operator: "EQ";
            value: null | string;
        };
        CommissionFilter: {
            properties: (components["schemas"]["CommissionFilterItem"] | {
                $or: components["schemas"]["CommissionFilterItem"][];
            })[];
            sort?: components["schemas"]["CommissionFilterSortableProperty"] | components["schemas"]["CommissionFilterSortableProperty"][];
            limit?: number;
            offset?: number;
        };
        CommissionFilterSortableProperty: {
            sortBy?: "needsAttention" | "closeDate" | "teamName" | "address";
            /** @enum {string} */
            sortDirection?: "ASC" | "DESC";
        };
        CommissionHistory: {
            historyId: string;
            /** @example null */
            requestId: null | string;
            changes: {
                field: string;
                /** @example null */
                oldValue: null | string;
                /** @example null */
                newValue: null | string;
                entityId: string;
            }[];
            allocationChanges: {
                field: string;
                /** @example null */
                oldValue: null | string;
                /** @example null */
                newValue: null | string;
                entityId: string;
            }[];
            allocationSplitChanges: {
                field: string;
                /** @example null */
                oldValue: null | string;
                /** @example null */
                newValue: null | string;
                entityId: string;
            }[];
            commissionLineItemChanges: {
                field: string;
                /** @example null */
                oldValue: null | string;
                /** @example null */
                newValue: null | string;
                entityId: string;
            }[];
            assigneeChanges: {
                /** @enum {string} */
                action: "ADD" | "UPDATE" | "DELETE";
                assignee: string;
                entityId: string;
            }[];
            disqualifyingReasonsChanges: {
                /** @enum {string} */
                action: "ADD" | "UPDATE" | "DELETE";
                /** @enum {string} */
                reason: "ZERO_DOLLARS_TO_SIDE" | "IS_CONCIERGE_LOAN" | "HAS_PRE_SPLIT_FEES" | "HAS_OP_CITY_REFERRAL" | "HAS_CO_BROKERAGE_FEES" | "IS_PERSONAL_TRANSACTION" | "HAS_TERMINATED_AGENTS" | "HAS_BUYER_SIDE_ADDITIONAL_COMMISSION" | "INTERNAL_REFERRAL" | "AUTO_SEND_DISABLED" | "NO_RECIPIENTS_PARTNER_STATEMENT" | "NO_RECIPIENTS_ASSOCIATE_STATEMENT" | "NO_RECIPIENTS_TEAM_LEAD_STATEMENT" | "HAS_ADDITIONAL_COMMISSION" | "INSUFFICIENT_SIDE_SHARE_FOR_FLAT_FEE_TEAM";
                entityId: string;
            }[];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        ExpectedPayment: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            status: "ACTIVE" | "RECONCILED" | "CANCELLED" | "REQUESTED" | "TENTATIVELY_RECONCILED";
            gciPostFee: number;
            opportunityId: string;
            /** @example null */
            opportunityState: null | string;
            /** @example null */
            interactionId: null | string;
            /** @example null */
            transactionId: null | string;
            opportunityName: string;
            /** @example null */
            workdayCustomerId: null | string;
            escrowCompany: string;
            eventId: string;
            /** Format: date */
            closeDate: string;
            /** @example null */
            modernTreasuryFilteringLogic: null | string;
        };
        ExternalInvoice: {
            id: string;
            opportunityId: string;
            /** @example null */
            accountingInvoiceId: null | string;
            /** @enum {string} */
            type: "CUSTOMER" | "SUPPLIER";
            /** @example null */
            invoiceDate: null | string;
            /** @example null */
            paymentDate: null | string;
            invoiceAmount: number;
            taxAmount: number | null;
            amountDue: number;
            /** @example null */
            escrowCompanyId: null | string;
            /** @example null */
            supplierTeamContactId: null | string;
            /** @example null */
            supplierAccountId: null | string;
            /** @example null */
            accountingPayeeId: null | string;
            /** @example null */
            integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
            /** @example null */
            additionalWireId: null | string;
            /** @example null */
            accountingErrorMsg: null | string;
        };
        ExternalInvoiceLineItem: {
            id: string;
            /** @description The amount of the line item. Can be positive or negative. */
            amount: number;
            /**
             * @description For suppliers, you must supply a spend category. For customers, it should be null
             * @example null
             */
            spendCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_RENTAL_FEE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "SC_EO_INSURANCE" | "ECOMMISSION_PAID_BY_TITLE" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEES_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "REGIONAL_FEE_PAID_BY_SIDE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_E_O_FEE");
            /**
             * @description For customers, you must supply a revenue category. For suppliers, it should be null
             * @example null
             */
            revenueCategory: null | ("ADJUSTMENT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TEAM_FEE_PAID_BY_SIDE" | "WIRE_FEE_PAID_BY_TITLE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INACTIVE_RERM_FEE_PAID_BY_SIDE");
            /**
             * @description The tax code is set during invoice generation. Admins can manually adjust it.
             * @example null
             */
            taxCode: null | string;
            /**
             * @description The legacy SF ID that maps to the Agent Commission record. Field name: Agent_Commission__c
             * @example null
             */
            agentCommissionId: null | string;
            /**
             * @description The legacy SF ID that maps to the Demand Transaction Detail record. Field name: Demand_Transaction_Detail__c
             * @example null
             */
            demandTransactionDetailId: null | string;
            /** @description The legacy SF ID of the invoice this line item belongs to. */
            invoiceId: string;
        };
        History: {
            id: string;
            /** @example null */
            requestId: null | string;
            changes: {
                field: string;
                /** @example null */
                oldValue: null | string;
                /** @example null */
                newValue: null | string;
            }[];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        InvoiceLineItem: {
            id: string;
            /**
             * @description The salesforce ID of the invoice line item. Mapped from Id
             * @example null
             */
            legacyExternalId: null | string;
            /**
             * @description The category of the line item. Mapped from Invoice.Spend_Category__c and Invoice.Revenue_Category__c
             * @enum {string}
             */
            accountingCategory: "ADJUSTMENT_PAID_BY_SIDE" | "AGENT_COMMISSIONS_SIDE_SHARE" | "AGENT_REBATE_PAID_BY_SIDE" | "BROKERAGE_CREDIT_PAID_BY_SIDE" | "CHARITY_FEE_PAID_BY_TITLE" | "CLIENT_CREDIT_PAID_BY_TITLE" | "COMPED_FEES_PAID_BY_SIDE" | "CONCIERGE_LOAN" | "ECOMMISSION_PAID_BY_TITLE" | "GCI_PRE_SPLIT_ADJUSTMENT" | "GROSS_TRANSACTIONS" | "HOME_WARRANTY_PAID_BY_TITLE" | "INACTIVE_E_O_FEE" | "INACTIVE_E_O_INSURANCE" | "INACTIVE_PAID_BY_TITLE_TC_FEES" | "INACTIVE_RERM_FEE_PAID_BY_SIDE" | "INACTIVE_TEAM_FEE_PAID_BY_TITLE" | "INCOMING_REFERRAL_FEE_PAID_BY_SIDE" | "LEASE_OUTSIDE_BROKERAGE" | "MISC_FEE_PAID_BY_TITLE" | "NATURAL_HAZARD_REPORT_PAID_BY_TITLE" | "POST_CAP_SAVINGS_PAID_BY_SIDE" | "PRE_SPLIT_CLIENT_CREDIT_PAID_BY_TITLE" | "PRE_SPLIT_RENTAL_FEE_PAID_BY_TITLE" | "PRE_SPLIT_SHARE_TO_AGENT_PAID_BY_SIDE" | "PRE_SPLIT_SHARE_TO_TEAM_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_SIDE" | "REFERRAL_FEE_EXTERNAL_PAID_BY_TITLE" | "REFERRAL_FEE_INTERNAL_PAID_BY_SIDE" | "REGIONAL_FEE_PAID_BY_SIDE" | "REIMBURSABLE_COMMISSION_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_SIDE" | "RERM_FEE_PAID_BY_TITLE" | "SALT_PAYABLE_PAID_BY_SIDE" | "SC_AGENT_COMMISSIONS" | "SC_EO_INSURANCE" | "SC_POST_CAP_SAVINGS_ADJUSTMENTS" | "SC_RENTAL_FEE" | "SC_TEAM_RENTAL_FEE_PAID_BY_SIDE" | "SHOWING_FEE_PAID_BY_SIDE" | "TC_FEE_COMPED_PAID_BY_SIDE" | "TC_FEE_PAID_BY_TITLE" | "TC_FEES_PAID_BY_SIDE" | "TEAM_FEE_PAID_BY_SIDE" | "TEAM_POST_CAP_SAVINGS_PAID_SIDE" | "WIRE_FEE_PAID_BY_TITLE";
            /**
             * @description The allocation UUID the this line is associated with. Mapped from Invoice.Agent_Commission__c
             * @example null
             */
            allocationId: null | string;
            /** @description The amount of the invoice line item. Mapped from Invoice.Amount__c */
            amount: number;
            /**
             * @description The commission line item UUID. An invoice line item will either have an allocationId or a commissionLineItemId. Mapped from Invoice.Demand_Transaction_Detail__c
             * @example null
             */
            commissionLineItemId: null | string;
            invoiceId: string;
            /**
             * @description The tax code generated from our tax code from zipcode lookup system.
             * @example null
             */
            taxCode: null | string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        Invoice: {
            /**
             * @description The salesforce ID of the invoice. Mapped from Id
             * @example a3oVu0000003mMfIAI
             */
            legacyExternalId: null | string;
            /**
             * @description Unknown status field.
             * @example null
             */
            accountingStatus: null | ("SUBMITTED" | "PENDING");
            /**
             * @description An additional wire ID. Used for invoices that pay external vendors like Zillow for certain leads.
             * @example BBSE-9042-FDRK
             */
            additionalWireId: null | string;
            /** @description The amount of the invoice. It is stored on the invoice entity, but technically just calculated from the line items. Mapped from Invoice.Invoice_Amount__c in SF */
            amount: number;
            /** @description The amount due for the invoice. It is sotred on the invoice entity, but technically its calculated (invoice.amount + invoice.taxAmount). Mapped from Invoice.Amount_Due__c in SF */
            amountDue: number;
            /**
             * @description The UUID of the commission that this invoice is associated with. commission.legacyExternalId maps to the salesforce Invoice.Opportunity__c
             * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
             */
            commissionId: string;
            /** @description The date of the invoices creation. This is set to the date of closing during the invoice generation process. */
            date: string;
            /**
             * @description The current status of the invoice regarding our accounting system. Updated after the invoice is sent to the accounting system.
             * @example null
             */
            integrationStatus: null | ("SENT_TO_BOOMI" | "SUBMITTED_TO_WORKDAY" | "APPROVED_IN_WORKDAY" | "FAILED_IN_WORKDAY");
            /**
             * @description A name for the invoice. Mapped from Invoice.Name
             * @example 9082
             */
            name: string;
            /**
             * @description The accounting systems auto-generated invoice number. This is set by the accounting system after we send over the invoice data
             * @default null
             * @example CINV-54737
             */
            number: null | string;
            /**
             * @description The UUID of the party that this invoice is associated with. Mapped from Invoice.Team_Supplier__c, Invoice.Team_Member_Supplier__c, or Invoice.Customer__c
             * @example 4f20f0f0-1a30-4c03-9c5d-a3988e1dc44a
             */
            partyId: string;
            /**
             * @description The date the invoice was paid. Mapped from Invoice.Payment_Date__c
             * @example null
             */
            paymentDate: null | string;
            /** @description Whether the invoice requires a wire ID. */
            requiresWireId: boolean;
            /**
             * @description The tax amount of the invoice. Mapped from Invoice.Tax_Amount__c
             * @example null
             */
            taxAmount: null | number;
            /**
             * @description Whether the invoice is a customer or supplier invoice. This determines which type of party the invoice is likely associated with.
             * @enum {string}
             */
            type: "CUSTOMER" | "SUPPLIER";
            /**
             * @description An error message from the accounting system (if we receive one after sending over an invoice)
             * @example Validation error occurred. Invalid ID value.
             */
            workdayErrorMessage: null | string;
            id: string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        JobTask: {
            /**
             * Format: uuid
             * @description The UUID of the job this task belongs to.
             */
            jobId: string;
            requestBody: {
                /** @description The settlement run ID from Workday. */
                settlementRunId: string;
                /** @description The transaction reference from Workday for the payment. */
                transactionReferenceId?: string;
                /** @description The property address for transaction. */
                propertyAddress?: string;
                /** @description The priority of the payment request. Can be "high", "normal" or undefined. */
                priority?: "high" | "normal";
                /**
                 * @description The fallback type for the funds transfer.
                 * @enum {string}
                 */
                fallbackType?: "ach";
                /** @description The memo for the payment. */
                paymentMemo?: string;
                /** @description The invoice number. */
                invoiceNumber: string;
                /**
                 * @description The funds transfer type.
                 * @enum {string}
                 */
                paymentType: "ACH_MANUAL" | "CHECK_MANUAL" | "WIRE_MANUAL" | "EFT" | "CHECK" | "ACH";
                /** @description The settlement bank account reference string. */
                settlementBankAccount: string;
                /** @description The amount of the payment in dollars. */
                paymentAmount: string;
                /** @description The statement descriptor for the payment. */
                statementDescriptor?: string;
                /** @description The Workday ID for the payment. */
                workdayTransactionId: string;
                /** @description The external Modern Treasury account ID that is receiving the payment. */
                externalAccountId: string;
            } | {
                /**
                 * Format: uuid
                 * @description The UUID of the pricing plan template to assign to team members.
                 */
                pricingPlanTemplateId: string;
                /** @description The legacy external ID of the team member to assign the pricing plan template to. */
                teamMemberLegacyExternalId: string;
            };
            /**
             * @description The error message for job task if it failed.
             * @example null
             */
            errorMessage: null | string;
            /**
             * @description The status of the job task.
             * @example FAILED
             * @enum {string}
             */
            status: "FAILED" | "FAILED_PENDING_RETRY" | "PENDING" | "PROCESSING" | "SUCCEEDED" | "SUCCEEDED_NO_OP";
            id: string;
            job?: components["schemas"]["Job"];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        Job: {
            /**
             * @description The type of job being performed.
             * @example ASSIGN_PRICING_TEMPLATE_TO_TEAM_MEMBERS
             * @enum {string}
             */
            type: "ASSIGN_PRICING_TEMPLATE_TO_TEAM_MEMBERS" | "PROCESS_SETTLEMENT_RUN";
            /** @description The completion percentage of the related job tasks being performed. */
            percentComplete: number;
            requestBody: {
                /**
                 * Format: uuid
                 * @description The UUID of the pricing plan template to assign to team members.
                 */
                pricingPlanTemplateId: string;
                teamMemberLegacyExternalIds: string[];
            } | {
                /** @description The ID of the settlement run to process. */
                settlementRunId: string;
            };
            /** @description The error messages for all the related job tasks */
            errorMessages: string[];
            /**
             * @description The status of the job.
             * @example COMPLETED
             * @enum {string}
             */
            status: "COMPLETED" | "PENDING" | "PROCESSING";
            id: string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        Party: {
            id: string;
            /** @enum {string} */
            type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
            /** @example null */
            legacyExternalId: null | string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        ResolvedParty: {
            id: string;
            /** @example null */
            legacyExternalId: null | string;
            /** @enum {string} */
            type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
            party: components["schemas"]["TeamMember"] | components["schemas"]["Team"];
        };
        Ledger: {
            ledgerId: string;
            ledgerItemId: string;
            /** @enum {string} */
            type: "GROSS_COMMISSION" | "SALES_VALUE" | "TRANSACTION_COUNT" | "PERSONAL_TRANSACTION_COUNT" | "CAPPED_COMMISSION" | "E_AND_O_COLLECTION";
            /** Format: date */
            startDate: string;
            value: number;
            maxValue: number | null;
            linkToPartyIds: string[];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        PricingFee: {
            id: string;
            /** @example null */
            legacyExternalId: null | string;
            isPreAllocation: boolean;
            /** @example null */
            paidToType: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
            /** @example null */
            paidByType: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
            /** @enum {string} */
            feeType: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
            amount: number | null;
            percentage: number | null;
            isUniversalFee: boolean;
            /** @example null */
            paidByIds: null | string[];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        PricingPlan: {
            /** @description The legacy id of the pricing plan (Not the Id for resolving pricing plan parties) */
            legacyExternalId: null | string;
            /**
             * @description To easily identify if this is an agent or team pricing plan, derived in service TEAM_MEMBER | TEAM
             * @enum {string}
             */
            pricingPlanPartyType: "TEAM_MEMBER" | "TEAM";
            /**
             * @description The accumulate style type of pricing plan, INDIVIDUAL_CAP | SHARED_CAP | NO_CAP | FLAT_FEE_PER_TRANSACTION | TEAM_TIER_NO_CAP
             * @enum {string}
             */
            pricingPlanAccumulationType: "INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP";
            noCapTierType: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
            discountType: null | ("DEFER_COMMISSION_START_DATE" | "FOUR_PERSONAL_TRANSACTIONS_PER_YEAR" | "NINE_PERCENT_FIRST_TIER");
            discountValue: null | number;
            postCapSavingsRecipientType: null | ("AGENT" | "TEAM" | "PARENT_TEAM");
            nextCommissionResetDate: null | string;
            commissionEffectiveDate: null | string;
            nextCapResetDate: null | string;
            capEffectiveDate: null | string;
            pricingPlanResetPeriodType: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1" | "NO_RESET_DATE");
            pricingPlanCapResetPeriodType: null | ("OTHER" | "LICENSE_TRANSFER_DATE" | "ANNUAL_JAN_1");
            archivedAt: null | string;
            chargeForLeases: boolean;
            isDraft: boolean;
            /** @description Derived in the service layer to easily indicate active plan on client side */
            isActive: boolean;
            isTemplate: boolean;
            /** @description Only used for template plans */
            templateName: null | string;
            /** @description Only used for template plans */
            originatingPlanId: null | string;
            /** @description Only used for template plans */
            roleRestriction: null | ("ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR");
            /** @description Either an array of team.id or teamMember.id depending on whether pricingPlanPartyType is TEAM_MEMBER or TEAM */
            linkedParties: string[];
            strategies: components["schemas"]["PricingStrategy"][];
            /** @description Shared caps linked with this plan (If any) */
            sharedCap: null | components["schemas"]["SharedCap"];
            capAmount: null | number;
            personalTransactionCount: null | number;
        } & {
            id: string;
        } & {
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        PricingStrategy: {
            id: string;
            /** @example null */
            legacyExternalId: null | string;
            isForPersonalTransaction: boolean;
            /** @example null */
            type: null | ("FLAT_FEE" | "DEFAULT_SPLIT" | "TIERED_SPLIT" | "CONDITIONAL_SPLIT" | "FEE" | "LEAD_SOURCE" | "PERSONAL_TRANSACTION");
            /** @example null */
            leadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
            /** @example null */
            transactionType: null | ("COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES");
            /** @example null */
            representing: null | ("BUYER" | "SELLER" | "BOTH");
            /** @example null */
            tierCriteria: null | ("GROSS_COMMISSION" | "HOME_SALES_PRICE" | "TRANSACTION_COUNT");
            tiers: components["schemas"]["CommissionTier"][];
            /** @example null */
            fees: null | components["schemas"]["PricingFee"][];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        SharedCap: {
            sharedCapId: string;
            capProgress: number;
            sharedCapPartyIds: string[];
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        SharedCapPatchBodyRef: {
            sharedCapId: string;
            capProgress: number;
            sharedCapPartyIds: string[];
        };
        PricingPlanFilterItem: {
            /** @enum {string} */
            property: "pricingPlanAccumulationType";
            /** @enum {string} */
            operator: "NEQ";
            /** @enum {string} */
            value: "INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP";
        } | {
            /** @enum {string} */
            property: "pricingPlanAccumulationType";
            /** @enum {string} */
            operator: "EQ";
            /** @enum {string} */
            value: "INDIVIDUAL_CAP" | "BRAND_CAP" | "SHARED_CAP" | "FLAT_FEE_PER_TRANSACTION" | "TEAM_TIER_NO_CAP" | "NO_CAP";
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "EQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "NEQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "LT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "LTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "GT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCapResetDate";
            /** @enum {string} */
            operator: "GTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "EQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "NEQ";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "LT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "LTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "GT";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "nextCommissionResetDate";
            /** @enum {string} */
            operator: "GTE";
            /** Format: date */
            value: string;
        } | {
            /** @enum {string} */
            property: "isDraft";
            /** @enum {string} */
            operator: "NEQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isDraft";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isTemplate";
            /** @enum {string} */
            operator: "NEQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "isTemplate";
            /** @enum {string} */
            operator: "EQ";
            value: boolean;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "EQ";
            /** Format: date-time */
            value: string;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "NEQ";
            /** Format: date-time */
            value: string;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "LT";
            /** Format: date-time */
            value: string;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "LTE";
            /** Format: date-time */
            value: string;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "GT";
            /** Format: date-time */
            value: string;
        } | {
            /** @enum {string} */
            property: "archivedAt";
            /** @enum {string} */
            operator: "GTE";
            /** Format: date-time */
            value: string;
        };
        PricingPlanFilter: {
            properties: (components["schemas"]["PricingPlanFilterItem"] | {
                $or: components["schemas"]["PricingPlanFilterItem"][];
            })[];
            sort?: components["schemas"]["PricingPlanFilterSortableProperty"] | components["schemas"]["PricingPlanFilterSortableProperty"][];
            limit?: number;
            offset?: number;
        };
        PricingPlanFilterSortableProperty: {
            sortBy?: unknown;
            /** @enum {string} */
            sortDirection?: "ASC" | "DESC";
        };
        CommissionTierSplitPutBodyV2: {
            id?: string;
            /** @example null */
            legacyExternalId: null | string;
            /** @example null */
            commissionTierId: null | string;
            percentage: number;
            /** @enum {string} */
            paidToType: "AGENT" | "BRAND" | "TEAM" | "BROKERAGE";
            /** @example null */
            templatePaidToPartyType: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
        };
        PricingFeeV2PutBodySchema: {
            id?: string;
            /** @example null */
            legacyExternalId: null | string;
            isPreAllocation: boolean;
            /** @example null */
            paidToType: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
            /** @example null */
            paidByType: null | ("AGENT" | "BRAND" | "TEAM" | "BROKERAGE" | "ESCROW");
            /** @enum {string} */
            feeType: "ADDITIONAL_COMMISSION" | "ADMIN_FEE" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "CHARITY" | "CLIENT_CREDIT" | "ECOMMISSION" | "HOME_WARRANTY_FEE" | "MISC_FEE" | "NATURAL_HAZARD_FEE" | "REFERRAL" | "REAL_ESTATE_RISK_MANAGEMENT_FEE" | "SHOWING_FEE" | "STAGING_FEE" | "TRANSACTION_COORDINATOR_FEE" | "TEAM_FEE" | "TRANSACTION_FEE" | "WIRE_FEE" | "CO_BROKERAGE_FEE" | "FMLS_FEE" | "FLAT_BROKERAGE_FEE" | "BROKERAGE_FEE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "ADJUSTMENT" | "ERRORS_AND_OMISSIONS_INSURANCE_FEE" | "LISTING_MANAGEMENT_FEE" | "MARKETING_FEE";
            amount: number | null;
            percentage: number | null;
            /** @example null */
            isUniversalFee: null | boolean;
            /** @example null */
            paidByIds: null | string[];
        };
        CommissionTierPutBodySchema: {
            id?: string;
            tierLevel: number;
            minAmount: number;
            splits: components["schemas"]["CommissionTierSplitPutBodyV2"][];
            /** @example null */
            noCapTierType: null | ("DEFAULT" | "GRANDFATHERED" | "CUSTOM" | "NY10" | "NY20");
            /** @example null */
            strategyId: null | string;
        };
        SharedAccumulation: {
            /** @description The total gross commission income in current cap period. */
            grossCommissionIncome: number | null;
            /** @description The total amount paid to Side in current cap period. */
            capProgress: number | null;
            /** @description The total number of personal transactions (Ex: an agent buying a property for themselves) in current cap period. This typically impacts commission calculation as personal transactions will sometimes have no fees paid to teams or brokerages */
            personalTransactionsUsed: number | null;
            /** @description The value of home sales in current cap period. */
            homeSaleVolume: number | null;
            /** @description The total number of transactions. */
            transactionCount: number | null;
            /** @description Prevents race conditions when updating the accumulation from multiple finalizations. */
            version: number;
            id: string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        TeamMember: {
            id: string;
            /**
             * @description The SFDC Id for the team member.
             * @example a0k6f00000HKfoEAAT
             */
            legacyExternalId: null | string;
            isInstantPayEligible: boolean;
            /**
             * @description The accounting supplier id for the team member. Our current accounting system is Workday. Thus, this is the team members Workday Id.
             * @example SUP-01639
             */
            accountingSupplierId: null | string;
            /** @example null */
            licenseTerminationDate: null | string;
            teamId: string;
            /**
             * @description The users id from the identity service
             * @example null
             */
            identityUserId: null | string;
            firstName: string;
            lastName: string;
            /** @enum {string} */
            role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
            /** @enum {string} */
            status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
            email: string;
            /**
             * @description The SFDC contact id for the user. Contacts are parent objects of Team Members. This is mapped from the SF field 'Contact__c'
             * @example null
             */
            userLegacyExternalId: null | string;
            hasAssociatedLicense: boolean;
            /** @example null */
            licenseTransferDate?: null | string;
            /** @example null */
            numberOfPendingTransactions?: null | number;
            /**
             * @description A uuid referring to the shared accumulation. A shared accumulation is used by one or more parties to track their progress.
             * @example null
             */
            sharedAccumulationId?: null | string;
        };
        Team: {
            id: string;
            /** @example null */
            identityTeamId: null | string;
            /** @example null */
            legacyExternalId: null | string;
            type: string;
            /** @example null */
            brandId: null | string;
            /** @example null */
            parentId: null | string;
            name: string;
            /** @example null */
            accountingSupplierId: null | string;
            /** @example null */
            accountingCustomerId: null | string;
            isInstantPayEligible: boolean;
            useAutoSendStatements: boolean;
            /** @example null */
            firstPartnerLicenseTransferDate?: null | string;
            /** @example null */
            launchDate?: null | string;
            /** @example null */
            teamPaymentEmail?: null | string;
            /** @example null */
            demandsPaymentsNotes?: null | string;
            /** @example null */
            sharedAccumulationId?: null | string;
            /** @example null */
            partnerUpReferrerId?: null | string;
            /** @example null */
            createdBy: null | string;
            /** Format: date-time */
            createdAt: string;
            /** @example null */
            updatedBy: null | string;
            /** Format: date-time */
            updatedAt: string;
        };
        AdminTransaction: {
            /** @example null */
            id: null | string;
            externalId: string;
            /** @example null */
            interactionId: null | string;
            /** @enum {string} */
            type: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
            address: {
                street: string;
                /** @example null */
                street2?: null | string;
                city: string;
                state: string;
                zip: string;
            };
            /** @enum {string} */
            status: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
            /** @enum {string} */
            side: "BUYER" | "SELLER";
            /** @example null */
            closeDate: null | string;
            startingGrossCommission: number;
            escrowAmount: number | null;
            team: {
                /** @example null */
                id: null | string;
                externalId: string;
                name: string;
                /** @enum {string} */
                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                /** @example null */
                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                isFlatFeeTeam: boolean;
                useSideTMPermissions: boolean;
                /** @example null */
                parentTeam: null | {
                    id: null | string;
                    externalId: string;
                    name: string;
                    /** @enum {string} */
                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                    isFlatFeeTeam: boolean;
                    useSideTMPermissions: boolean;
                };
            };
            /** @example null */
            commissionStatus: null | ("CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED");
            /** @example null */
            finalizedBy: null | ("MANUALLY_CLOSED" | "AUTO_CLOSED" | "INSTANT_PAID");
            /** @enum {string} */
            paymentStatus: "AWAITING_FORM" | "CLOSING_SOON" | "AWAITING_PAYMENT" | "EXPECTED_X_DAYS" | "AWAITING_CERTIFICATION" | "PAYMENT_INITIATED" | "PAID" | "COMMISSION_FORM_NOT_YET_AVAILABLE" | "UNKNOWN";
            /** @example null */
            lastSubmittedAt: null | string;
            hasInstallmentPayments: boolean;
            /** @example null */
            parentCommissionId: null | string;
            isCoList: boolean;
            isInstallment: boolean;
            isOriginalCoList: boolean;
            isOriginalInstallment: boolean;
        };
        TransactionCalculationError: {
            errorType: string;
            data?: {
                transactionExternalId?: string;
                demandTransactionExternalId?: string;
                allocationExternalId?: string;
                teamMemberExternalId?: string;
                teamExternalId?: string;
                parentTeamExternalId?: string;
                feeExternalId?: string;
                referralExternalId?: string;
                pricingPlanExternalId?: string;
                pricingCategoryExternalId?: string;
                pricingDetailExternalId?: string;
                rermPolicyExternalId?: string;
                feeCollectionExternalId?: string;
                teamTierPlanExternalId?: string;
            };
            message: string;
        };
        TransactionFinalizationError: {
            message: string;
            checks: {
                /** @example null */
                value: null | string;
                isValid: boolean;
                /** @enum {string} */
                type: "PAYMENT_RECEIVED" | "COMPLIANCE_COMPLETED" | "SETTLEMENT_CONTACT_APPROVED" | "COMMISSION_STATUS_READY" | "CLOSE_DATE_READY" | "TRANSACTION_STATUS_READY" | "STATEMENTS_SENT";
            }[];
        };
        TransactionResponse: {
            /** @example null */
            id: null | string;
            externalId: string;
            /** @example null */
            interactionId: null | string;
            street: string;
            city: string;
            state: string;
            zip: string;
            clients: string;
            team: {
                /** @example null */
                id: null | string;
                externalId: string;
                name: string;
                /** @enum {string} */
                type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                /** @example null */
                subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                isFlatFeeTeam: boolean;
                useSideTMPermissions: boolean;
                /** @example null */
                parentTeam: null | {
                    id: null | string;
                    externalId: string;
                    name: string;
                    /** @enum {string} */
                    type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                    subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                    isFlatFeeTeam: boolean;
                    useSideTMPermissions: boolean;
                };
            };
            /** @enum {string} */
            transactionSide: "BUYER" | "SELLER";
            /** @enum {string} */
            transactionType: "COMMERCIAL" | "CONDO_TOWNHOME_PUD" | "CO_OP" | "FARM_AND_RANCH" | "MANUFACTURED_HOME_OR_MOBILE" | "MULTI_UNIT_1_4" | "MULTI_UNIT_5_PLUS" | "NEW_CONSTRUCTION" | "NOT_SPECIFIED" | "PRE_PAID_CAP_TRANSACTION" | "REFERRAL_EXTERNAL" | "REFERRAL_INTERNAL" | "REFERRAL_IN_AND_EX" | "RENTAL_OR_LEASE" | "RESIDENTIAL" | "SINGLE_FAMILY_RESIDENCE" | "TENANCY_IN_COMMON" | "VACANT_LOT_OR_LAND" | "SALES";
            closeDate: string;
            salePrice: number;
            startingGrossCommission: number;
            adjustedGrossCommission: number | null;
            isFixedCommission: boolean;
            commissionPercentage: number | null;
            /** @example null */
            commissionLeadSource: null | ("AGENT_GENERATED" | "BTSA" | "DOOR_KNOCKING" | "MARKETING_CHANNEL" | "OFFER_WRITING" | "ONLINE" | "OPEN_HOUSE" | "PAID" | "PERFORMANCE" | "PROVIDED_BY_TEAM_LEAD_TO_ASSOCIATE_AGENT" | "PROVIDED_BY_TEAM_OR_PARTNER_TO_ASSOCIATE_AGENT" | "SHOWING_LEAD" | "TEAM_PROVIDED" | "TEAM_PROVIDED_COLD" | "TEAM_PROVIDED_WARM" | "TEAM_REFERRAL" | "ZILLOW");
            /** @enum {string} */
            transactionStatus: "CANCELLED" | "CLOSED" | "DELETED" | "DEMANDS_SENT_TO_ESCROW" | "INCOMING_REFERRAL" | "LEASE" | "LISTING_OR_LISTING_SIGNED" | "LISTING_SOLD" | "PENDING_OR_IN_ESCROW" | "PRE_RESIDE";
            /** @example null */
            demandTransaction: null | {
                id: null | string;
                externalId: string;
                /** @enum {string} */
                status: "CREATED" | "NEW" | "DRAFT" | "SUBMITTED" | "COMPUTED" | "STATEMENT_GENERATED" | "LOCKED" | "FINAL_LOCKED" | "FINAL_SUBMITTED" | "FINAL_COMPUTED" | "TAXES_GENERATED" | "FINAL_STATEMENT_GENERATED" | "ADJUSTMENT_SUBMITTED" | "ADJUSTMENT_COMPUTED";
                hasBeenSubmitted: boolean;
                /** Format: date-time */
                updatedAt: string;
                updatedBy: string;
            };
            /** @example null */
            settlementContact: null | {
                id: null | string;
                externalId: string;
                firstName: string;
                lastName: string;
                email: string;
                phoneNumber: null | string;
                company: {
                    id: null | string;
                    externalId: string;
                    name: string;
                };
                fileNumber: null | string;
            };
            allocations: {
                /** @example null */
                id: null | string;
                externalId: string;
                profile: {
                    /** @example null */
                    id: null | string;
                    externalId: string;
                    name: string;
                    teamExternalId: string;
                    /** @enum {string} */
                    role: "ADMINISTRATOR" | "ASSOCIATE_AGENT" | "BROKER" | "INTERNAL_USER" | "INTERNAL_USER_ASSOCIATE" | "PARTNER_AGENT" | "REFERRAL_AGENT" | "SUPERVISING_BROKER" | "TEAM_LEAD" | "TRANSACTION_COORDINATOR";
                    /** @enum {string} */
                    status: "ACTIVE" | "OFFBOARDING" | "ONBOARDING" | "PROSPECT" | "TERMINATED";
                    /** @example null */
                    licenseTerminationDate: null | string;
                    hasMetPersonalTransactionLimit?: boolean;
                };
                amount: number;
                isPercent: boolean;
                isPersonalTransaction: boolean;
                isRepresentingBothParties: boolean;
                splits?: {
                    agentPercent: number;
                    teamPercent: number;
                    brokeragePercent: number;
                    parentTeamPercent: number;
                    amountOwedToSide: number | null;
                    expectedBrokeragePercent: number | null;
                };
                isCapReached?: boolean;
                hasMetPersonalTransactionLimit: boolean;
                gross: {
                    agent: number | null;
                    team: number | null;
                    parentTeam: number | null;
                    brokerage: number | null;
                };
                tax: {
                    agentAmount: number | null;
                    teamAmount: number | null;
                    parentTeamAmount: number | null;
                };
                agentNet: number | null;
                postCapSavingsAmount: number | null;
                /** @example null */
                postCapSavingsRecipient: null | ("AGENT" | "BRAND" | "PARENT_TEAM");
            }[];
            fees: {
                /** @example null */
                id: null | string;
                externalId: string;
                /** @enum {string} */
                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                isPre: boolean;
                amount: number;
                isPercent: boolean;
                calculatedAmount: number | null;
                /** @example null */
                payee: null | {
                    id: null | string;
                    name: string;
                    team: null | {
                        id: null | string;
                        externalId: string;
                        name: string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                        isFlatFeeTeam: boolean;
                        useSideTMPermissions: boolean;
                        parentTeam: null | {
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                        };
                    };
                    externalId: string;
                    /** @enum {string} */
                    type: "PROFILE" | "TEAM";
                };
                /** @example null */
                payer: null | {
                    id: null | string;
                    name: string;
                    team: null | {
                        id: null | string;
                        externalId: string;
                        name: string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                        isFlatFeeTeam: boolean;
                        useSideTMPermissions: boolean;
                        parentTeam: null | {
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                        };
                    };
                    externalId: string;
                    /** @enum {string} */
                    type: "PROFILE" | "TEAM";
                };
                /** @example null */
                companyName: null | string;
                /** @example null */
                agentName: null | string;
                attachments: {
                    /** @example null */
                    id: null | string;
                    externalId: string;
                    file: {
                        name: string;
                    };
                }[];
                /** @example null */
                description?: null | string;
            }[];
            coBrokerageFees: {
                /** @example null */
                id: null | string;
                externalId: string;
                /** @enum {string} */
                type: "ADDITIONAL_COMMISSION" | "ADJUSTMENT" | "ADMIN" | "AGENT_REBATE" | "AGENT_TO_AGENT_SAME_TEAM" | "BRAND" | "BROKERAGE" | "CHARITY" | "CHARITY_BY_TITLE" | "CLEANING" | "CLIENT_CREDIT" | "CLOSING_COST_CREDIT" | "CO_BROKERAGE" | "ECOMMISSION" | "E_AND_O" | "FLAT_BROKERAGE" | "FMLS" | "HOA_DOCUMENT" | "HOME_WARRANTY" | "INSPECTION_REPORT" | "LISTING_MANAGEMENT" | "MARKETING" | "MISC_PAID_BY_TITLE" | "MLS_FEE_DEDUCTION" | "MLS_FEE_REIMBURSEMENT" | "NATURAL_HAZARD" | "NOTARY" | "OTHER" | "PHOTOGRAPHY" | "REFERRAL" | "REPAIR" | "RERM" | "SALT_PAYABLE" | "SHOWING" | "SIDE_PAID_TC" | "STAGING" | "TC" | "TC_BY_TITLE" | "TEAM" | "TEAM_RENTAL" | "TEAM_SHARE" | "TRANSACTION" | "WIRE";
                isPre: boolean;
                amount: number;
                isPercent: boolean;
                calculatedAmount: number | null;
                /** @example null */
                payee: null | {
                    id: null | string;
                    name: string;
                    team: null | {
                        id: null | string;
                        externalId: string;
                        name: string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                        isFlatFeeTeam: boolean;
                        useSideTMPermissions: boolean;
                        parentTeam: null | {
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                        };
                    };
                    externalId: string;
                    /** @enum {string} */
                    type: "PROFILE" | "TEAM";
                };
                /** @example null */
                payer: null | {
                    id: null | string;
                    name: string;
                    team: null | {
                        id: null | string;
                        externalId: string;
                        name: string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                        isFlatFeeTeam: boolean;
                        useSideTMPermissions: boolean;
                        parentTeam: null | {
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                        };
                    };
                    externalId: string;
                    /** @enum {string} */
                    type: "PROFILE" | "TEAM";
                };
                /** @example null */
                companyName: null | string;
                /** @example null */
                agentName: null | string;
                attachments: {
                    /** @example null */
                    id: null | string;
                    externalId: string;
                    file: {
                        name: string;
                    };
                }[];
                /** @example null */
                description?: null | string;
            }[];
            referrals: {
                /** @example null */
                id: null | string;
                externalId: string;
                amount: number;
                isPercent: boolean;
                calculatedAmount: number | null;
                payee: {
                    /** @example null */
                    id: null | string;
                    name: string;
                    /** @example null */
                    team: null | {
                        id: null | string;
                        externalId: string;
                        name: string;
                        /** @enum {string} */
                        type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                        subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                        isFlatFeeTeam: boolean;
                        useSideTMPermissions: boolean;
                        parentTeam: null | {
                            id: null | string;
                            externalId: string;
                            name: string;
                            /** @enum {string} */
                            type: "BROKERAGE" | "CUSTOMER" | "CUSTOMER_LOST" | "LAUNCH_ATTRITION" | "IN_LAUNCH" | "PROSPECT" | "SIDE" | "VENDOR";
                            subType: null | ("ESCROW" | "EXPANSION_MARKET" | "EXTENDED_OFFER_CO_BRAND" | "EXTENDED_OFFER_STANDALONE" | "EXTERNAL_BROKERAGE" | "REAL_ESTATE_SERVICES" | "REFERRAL_COMPANY" | "TRADITIONAL");
                            isFlatFeeTeam: boolean;
                            useSideTMPermissions: boolean;
                        };
                    };
                    /** @example null */
                    externalId: null | string;
                    /** @enum {string} */
                    type: "EXTERNAL_COMPANY" | "EXTERNAL_PERSON" | "BROKERAGE" | "EXTERNAL_AGENT" | "EXTERNAL_BROKERAGE" | "OUTSIDE_BROKERAGE" | "REFERRAL_COMPANY" | "SETTLEMENT_COMPANY" | "SETTLEMENT_CONTACT" | "TEAM_MEMBER" | "REAL_ESTATE_SERVICES" | "PROFILE" | "TEAM";
                    /** @example null */
                    brokerageName: null | string;
                    /** @example null */
                    address: null | {
                        street: null | string;
                        city: null | string;
                        state: null | string;
                        zip: null | string;
                    };
                };
                /** @example null */
                description?: null | string;
                /** @example null */
                externalReferralId: null | string;
            }[];
            /** @example null */
            commissionSummary: null | {
                agentGross: number | null;
                agentCommission: number | null;
                teamGross: number | null;
                teamCommission: number | null;
                teamTaxAmount: number | null;
                parentTeamGross: number | null;
                parentTeamCommission: number | null;
                parentTeamTaxAmount: number | null;
                brokerageGross: number | null;
                brokerageCommission: number | null;
                escrowAmount: number | null;
            };
            /** @enum {string} */
            commissionSystem: "SIDE" | "BROKERMINT" | "UNKNOWN";
            hasInstallmentPayments: boolean;
            /** Format: date-time */
            updatedAt: string;
            updatedBy: string;
            isInstantPayEligible: boolean;
            isConciergeLoan: boolean;
            escrowAmount: number | null;
            netCommission: number | null;
            /** @example null */
            complianceStage: null | ("ARCHIVED" | "BROKER_ACCEPTED" | "BROKER_APPROVAL_TO_PAY" | "BROKER_REVIEW" | "CANCELLED" | "COMPLIANCE_HOLD" | "CLOSING_HOLD" | "FAIR_TRADE" | "FINAL_REVIEW" | "IN_REVIEW" | "LEASE_REVIEW_COMPLETED" | "LISTING_INITIAL_REVIEW" | "LISTING_REVIEWED" | "NEW_BUILD_REFERRAL" | "OFFER_INITIAL_REVIEW" | "READY_FOR_DRIP_CAMPAIGN" | "REFERRAL_ONLY" | "REJECTED" | "SECOND_REVIEW" | "THIRD_REVIEW" | "WAITING");
            latestStatementsSent: boolean;
            isPersonalTransaction: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
